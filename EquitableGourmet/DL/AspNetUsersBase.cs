/*
'===============================================================================
'  Generated From - CSharp_DAAB_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL      = SQL_DAAB_Net2_StoredProcs.vbgen
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  YourObjectBase
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Collections.Specialized;
using System.Xml;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Data;
using System.Data.Common;

namespace EquitableGourmet
{
	public abstract class AspNetUsersBase
	{
		#region < VARIABLES >
		private string _Id;
		private string _Email;
		private bool _EmailConfirmed;
		private string _PasswordHash;
		private string _SecurityStamp;
		private string _PhoneNumber;
		private bool _PhoneNumberConfirmed;
		private bool _TwoFactorEnabled;
		private DateTime _LockoutEndDateUtc;
		private bool _LockoutEnabled;
		private int _AccessFailedCount;
		private string _UserName;
		private bool _isNew;
		#endregion
		
		#region < CONSTRUCTORES >
		protected AspNetUsersBase()
		{
			_Id = string.Empty;
			_Email = string.Empty;
			_PasswordHash = string.Empty;
			_SecurityStamp = string.Empty;
			_PhoneNumber = string.Empty;
			_LockoutEndDateUtc = DateTime.Parse("01/01/1900");
		}
		
		protected AspNetUsersBase(string Id) : this()
		{
			_Id = Id;
		}
	
		protected AspNetUsersBase(string Id, string Email, bool EmailConfirmed, string PasswordHash, string SecurityStamp, string PhoneNumber, bool PhoneNumberConfirmed, bool TwoFactorEnabled, DateTime LockoutEndDateUtc, bool LockoutEnabled, int AccessFailedCount, string UserName) : this()
		{
			_Id = Id;
			_Email = Email;
			_EmailConfirmed = EmailConfirmed;
			_PasswordHash = PasswordHash;
			_SecurityStamp = SecurityStamp;
			_PhoneNumber = PhoneNumber;
			_PhoneNumberConfirmed = PhoneNumberConfirmed;
			_TwoFactorEnabled = TwoFactorEnabled;
			_LockoutEndDateUtc = LockoutEndDateUtc;
			_LockoutEnabled = LockoutEnabled;
			_AccessFailedCount = AccessFailedCount;
			_UserName = UserName;
		}

		#endregion
		
		#region < Metodos para ObtenciÃ³n de Detalles >

		#endregion
		
		#region < PROPIEDADES >
		
		public string Id
		{
			get	{ return _Id; }
			set	{ _Id = value; }
		}
		
		public string Email
		{
			get	{ return _Email; }
			set	{ _Email = value; }
		}
		
		public bool EmailConfirmed
		{
			get	{ return _EmailConfirmed; }
			set	{ _EmailConfirmed = value; }
		}
		
		public string PasswordHash
		{
			get	{ return _PasswordHash; }
			set	{ _PasswordHash = value; }
		}
		
		public string SecurityStamp
		{
			get	{ return _SecurityStamp; }
			set	{ _SecurityStamp = value; }
		}
		
		public string PhoneNumber
		{
			get	{ return _PhoneNumber; }
			set	{ _PhoneNumber = value; }
		}
		
		public bool PhoneNumberConfirmed
		{
			get	{ return _PhoneNumberConfirmed; }
			set	{ _PhoneNumberConfirmed = value; }
		}
		
		public bool TwoFactorEnabled
		{
			get	{ return _TwoFactorEnabled; }
			set	{ _TwoFactorEnabled = value; }
		}
		
		public DateTime LockoutEndDateUtc
		{
			get	{ return _LockoutEndDateUtc; }
			set	{ _LockoutEndDateUtc = value; }
		}
		
		public bool LockoutEnabled
		{
			get	{ return _LockoutEnabled; }
			set	{ _LockoutEnabled = value; }
		}
		
		public int AccessFailedCount
		{
			get	{ return _AccessFailedCount; }
			set	{ _AccessFailedCount = value; }
		}
		
		public string UserName
		{
			get	{ return _UserName; }
			set	{ _UserName = value; }
		}
		
		public bool IsNew
		{
			get 
			{ 
				return _isNew; 
			}
			set { _isNew = value; }
		}
		#endregion		

		#region Utilerias
		public static bool Existe(string Id)
		{
			Database db = DatabaseFactory.CreateDatabase();
			string sqlCommand = "daab_ExistsAspNetUsers";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add in parameters
			db.AddInParameter(dbCommandWrapper, "@Id", DbType.String, Id);

			// DataSet that will hold the returned results		
			// Note: connection closed by ExecuteDataSet method call 
			bool ret = false;
			int num = Convert.ToInt32(db.ExecuteScalar(dbCommandWrapper));
			ret = num > 0;
			return ret;
		}
		
		public static DataTable GetAllAspNetUsers()
		{
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_GetAllAspNetUsers";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);
			DataTable ret = db.ExecuteDataSet(dbCommandWrapper).Tables[0];
			
            ret.PrimaryKey = new DataColumn[] { ret.Columns["Id"] };
			
            return ret;
		}
		
		public static void SaveAll(DataTable tabla)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbDataAdapter da = db.GetDataAdapter();
			
			da.SelectCommand = db.GetStoredProcCommand("daab_GetAllAspNetUsers");
            da.InsertCommand = db.GetStoredProcCommand("daab_AddAspNetUsers");
            da.UpdateCommand = db.GetStoredProcCommand("daab_UpdateAspNetUsers");
            da.DeleteCommand = db.GetStoredProcCommand("daab_DeleteAspNetUsers");
			
			#region Parametros de InsertCommand
			db.AddInParameter(da.InsertCommand, "@Id", DbType.String, "Id", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@Email", DbType.String, "Email", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@EmailConfirmed", DbType.Boolean, "EmailConfirmed", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@PasswordHash", DbType.String, "PasswordHash", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@SecurityStamp", DbType.String, "SecurityStamp", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@PhoneNumber", DbType.String, "PhoneNumber", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@PhoneNumberConfirmed", DbType.Boolean, "PhoneNumberConfirmed", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@TwoFactorEnabled", DbType.Boolean, "TwoFactorEnabled", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@LockoutEndDateUtc", DbType.DateTime, "LockoutEndDateUtc", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@LockoutEnabled", DbType.Boolean, "LockoutEnabled", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@AccessFailedCount", DbType.Int32, "AccessFailedCount", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@UserName", DbType.String, "UserName", DataRowVersion.Default);

			#endregion
			
			#region Parametros de UpdateCommand
			db.AddInParameter(da.UpdateCommand, "@Id", DbType.String, "Id", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@Email", DbType.String, "Email", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@EmailConfirmed", DbType.Boolean, "EmailConfirmed", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@PasswordHash", DbType.String, "PasswordHash", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@SecurityStamp", DbType.String, "SecurityStamp", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@PhoneNumber", DbType.String, "PhoneNumber", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@PhoneNumberConfirmed", DbType.Boolean, "PhoneNumberConfirmed", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@TwoFactorEnabled", DbType.Boolean, "TwoFactorEnabled", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@LockoutEndDateUtc", DbType.DateTime, "LockoutEndDateUtc", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@LockoutEnabled", DbType.Boolean, "LockoutEnabled", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@AccessFailedCount", DbType.Int32, "AccessFailedCount", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@UserName", DbType.String, "UserName", DataRowVersion.Default);

			#endregion
			
			#region Parametros de DeleteCommand
			db.AddInParameter(da.DeleteCommand, "@Id", DbType.String, "Id", DataRowVersion.Default);

			#endregion

			db.UpdateDataSet(tabla.DataSet, tabla.TableName, da.InsertCommand, da.UpdateCommand, da.DeleteCommand, UpdateBehavior.Standard);
		}
		#endregion

		/// <summary>
		/// Populates a dataset with info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="Id"></param>
		/// <returns>A DataSet containing the results of the query</returns>
		private DataSet LoadByPrimaryKey(string Id)
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_GetAspNetUsers";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add in parameters
			db.AddInParameter(dbCommandWrapper, "@Id", DbType.String, Id);

			// DataSet that will hold the returned results		
			// Note: connection closed by ExecuteDataSet method call 
			return db.ExecuteDataSet(dbCommandWrapper);
		}
	
		/// <summary>
		/// Populates current instance of the object with info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="Id"></param>
		public virtual void Load(string Id)
		{
			// DataSet that will hold the returned results		
			DataSet ds = this.LoadByPrimaryKey(Id);
			
			// Load member variables from datarow
			DataRow row = ds.Tables[0].Rows[0];
			_Id = (string)row["Id"];
			_Email = row.IsNull("Email") ? string.Empty : (string)row["Email"];
			_EmailConfirmed = (bool)row["EmailConfirmed"];
			_PasswordHash = row.IsNull("PasswordHash") ? string.Empty : (string)row["PasswordHash"];
			_SecurityStamp = row.IsNull("SecurityStamp") ? string.Empty : (string)row["SecurityStamp"];
			_PhoneNumber = row.IsNull("PhoneNumber") ? string.Empty : (string)row["PhoneNumber"];
			_PhoneNumberConfirmed = (bool)row["PhoneNumberConfirmed"];
			_TwoFactorEnabled = (bool)row["TwoFactorEnabled"];
			_LockoutEndDateUtc = row.IsNull("LockoutEndDateUtc") ? DateTime.Parse("01/01/1900") : (DateTime)row["LockoutEndDateUtc"];
			_LockoutEnabled = (bool)row["LockoutEnabled"];
			_AccessFailedCount = (int)row["AccessFailedCount"];
			_UserName = (string)row["UserName"];
		}

		/// <summary>
		/// Adds or updates information in the database depending on the primary key stored in the object instance.
		/// </summary>
		/// <returns>Returns True if saved successfully, False otherwise.</returns>
		public bool Save()
		{
			if (this.IsNew)
				return Insert();
			else
				return Update();
		}

		/// <summary>
		/// Inserts the current instance data into the database.
		/// </summary>
		/// <returns>Returns True if saved successfully, False otherwise.</returns>
		private bool Insert()
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_AddAspNetUsers";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add parameters
			db.AddInParameter(dbCommandWrapper, "@Id", DbType.String, _Id);
			db.AddInParameter(dbCommandWrapper, "@Email", DbType.String, SetNullValue((_Email == string.Empty), _Email));
			db.AddInParameter(dbCommandWrapper, "@EmailConfirmed", DbType.Boolean, _EmailConfirmed);
			db.AddInParameter(dbCommandWrapper, "@PasswordHash", DbType.String, SetNullValue((_PasswordHash == string.Empty), _PasswordHash));
			db.AddInParameter(dbCommandWrapper, "@SecurityStamp", DbType.String, SetNullValue((_SecurityStamp == string.Empty), _SecurityStamp));
			db.AddInParameter(dbCommandWrapper, "@PhoneNumber", DbType.String, SetNullValue((_PhoneNumber == string.Empty), _PhoneNumber));
			db.AddInParameter(dbCommandWrapper, "@PhoneNumberConfirmed", DbType.Boolean, _PhoneNumberConfirmed);
			db.AddInParameter(dbCommandWrapper, "@TwoFactorEnabled", DbType.Boolean, _TwoFactorEnabled);
			db.AddInParameter(dbCommandWrapper, "@LockoutEndDateUtc", DbType.DateTime, SetNullValue((_LockoutEndDateUtc == DateTime.Parse("01/01/1900")), _LockoutEndDateUtc));
			db.AddInParameter(dbCommandWrapper, "@LockoutEnabled", DbType.Boolean, _LockoutEnabled);
			db.AddInParameter(dbCommandWrapper, "@AccessFailedCount", DbType.Int32, _AccessFailedCount);
			db.AddInParameter(dbCommandWrapper, "@UserName", DbType.String, _UserName);

			db.ExecuteNonQuery(dbCommandWrapper);
			
			return true;
		}

		/// <summary>
		/// Updates the current instance data in the database.
		/// </summary>
		/// <returns>Returns True if saved successfully, False otherwise.</returns>
		public bool Update()
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_UpdateAspNetUsers";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add parameters
			db.AddInParameter(dbCommandWrapper, "@Id", DbType.String, _Id);
			db.AddInParameter(dbCommandWrapper, "@Email", DbType.String, SetNullValue((_Email == string.Empty), _Email));
			db.AddInParameter(dbCommandWrapper, "@EmailConfirmed", DbType.Boolean, _EmailConfirmed);
			db.AddInParameter(dbCommandWrapper, "@PasswordHash", DbType.String, SetNullValue((_PasswordHash == string.Empty), _PasswordHash));
			db.AddInParameter(dbCommandWrapper, "@SecurityStamp", DbType.String, SetNullValue((_SecurityStamp == string.Empty), _SecurityStamp));
			db.AddInParameter(dbCommandWrapper, "@PhoneNumber", DbType.String, SetNullValue((_PhoneNumber == string.Empty), _PhoneNumber));
			db.AddInParameter(dbCommandWrapper, "@PhoneNumberConfirmed", DbType.Boolean, _PhoneNumberConfirmed);
			db.AddInParameter(dbCommandWrapper, "@TwoFactorEnabled", DbType.Boolean, _TwoFactorEnabled);
			db.AddInParameter(dbCommandWrapper, "@LockoutEndDateUtc", DbType.DateTime, SetNullValue((_LockoutEndDateUtc == DateTime.Parse("01/01/1900")), _LockoutEndDateUtc));
			db.AddInParameter(dbCommandWrapper, "@LockoutEnabled", DbType.Boolean, _LockoutEnabled);
			db.AddInParameter(dbCommandWrapper, "@AccessFailedCount", DbType.Int32, _AccessFailedCount);
			db.AddInParameter(dbCommandWrapper, "@UserName", DbType.String, _UserName);

			try
			{
				db.ExecuteNonQuery(dbCommandWrapper);
				
				return true;
			}
			catch
			{
				return false;
			}
		}

		/// <summary>
		/// Removes info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="Id"></param>
		public static void Remove(string Id)
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_DeleteAspNetUsers";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add primary keys to command wrapper.
			db.AddInParameter(dbCommandWrapper, "@Id", DbType.String, Id);

			db.ExecuteNonQuery(dbCommandWrapper);
		}
		
		/// <summary>
		/// Serializes the current instance data to an Xml string.
		/// </summary>
		/// <returns>A string containing the Xml representation of the object.</returns>
		virtual public string ToXml()
		{
			// DataSet that will hold the returned results		
			DataSet ds = this.LoadByPrimaryKey(_Id);
			StringWriter writer = new StringWriter(); 
			ds.WriteXml(writer); 
			return writer.ToString(); 
		}

		/// <summary>
		/// Utility function that returns a DBNull.Value if requested. The comparison is done inline
		/// in the Insert() and Update() functions.
		/// </summary>
		private object SetNullValue(bool isNullValue, object value)
		{
			if (isNullValue)
				return DBNull.Value;
			else
				return value;
		}
	}
}
