/*
'===============================================================================
'  Generated From - CSharp_DAAB_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL      = SQL_DAAB_Net2_StoredProcs.vbgen
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  YourObjectBase
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Collections.Specialized;
using System.Xml;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Data;
using System.Data.Common;

namespace DL
{
	public abstract class CompanyBase
	{
		#region < VARIABLES >
		private int _CompanyID;
		private int _CompanyNumber;
		private string _CompanyName;
		private byte[] _CompanyLogo;
		private string _Slogan;
		private string _CurrencyName;
		private string _CurrencySymbol;
		private string _Description;
		private int _CreateBy;
		private DateTime _CreateDate;
		private bool _Del;
		private bool _isNew;
		#endregion
		
		#region < CONSTRUCTORES >
		protected CompanyBase()
		{
			_CompanyID = 0;
			_CompanyNumber = 0;
			_CompanyName = string.Empty;
			_CompanyLogo = new byte[] {};
			_Slogan = string.Empty;
			_CurrencyName = string.Empty;
			_CurrencySymbol = string.Empty;
			_Description = string.Empty;
			_CreateBy = 0;
			_CreateDate = DateTime.Parse("01/01/1900");
			_Del = false;
		}
		
		protected CompanyBase(int CompanyID) : this()
		{
			_CompanyID = CompanyID;
		}
	
		protected CompanyBase(int CompanyID, int CompanyNumber, string CompanyName, byte[] CompanyLogo, string Slogan, string CurrencyName, string CurrencySymbol, string Description, int CreateBy, DateTime CreateDate, bool Del) : this()
		{
			_CompanyID = CompanyID;
			_CompanyNumber = CompanyNumber;
			_CompanyName = CompanyName;
			_CompanyLogo = CompanyLogo;
			_Slogan = Slogan;
			_CurrencyName = CurrencyName;
			_CurrencySymbol = CurrencySymbol;
			_Description = Description;
			_CreateBy = CreateBy;
			_CreateDate = CreateDate;
			_Del = Del;
		}

		#endregion
		
		#region < Metodos para ObtenciÃ³n de Detalles >

		#endregion
		
		#region < PROPIEDADES >
		
		public int CompanyID
		{
			get	{ return _CompanyID; }
			set	{ _CompanyID = value; }
		}
		
		public int CompanyNumber
		{
			get	{ return _CompanyNumber; }
			set	{ _CompanyNumber = value; }
		}
		
		public string CompanyName
		{
			get	{ return _CompanyName; }
			set	{ _CompanyName = value; }
		}
		
		public byte[] CompanyLogo
		{
			get	{ return _CompanyLogo; }
			set	{ _CompanyLogo = value; }
		}
		
		public string Slogan
		{
			get	{ return _Slogan; }
			set	{ _Slogan = value; }
		}
		
		public string CurrencyName
		{
			get	{ return _CurrencyName; }
			set	{ _CurrencyName = value; }
		}
		
		public string CurrencySymbol
		{
			get	{ return _CurrencySymbol; }
			set	{ _CurrencySymbol = value; }
		}
		
		public string Description
		{
			get	{ return _Description; }
			set	{ _Description = value; }
		}
		
		public int CreateBy
		{
			get	{ return _CreateBy; }
			set	{ _CreateBy = value; }
		}
		
		public DateTime CreateDate
		{
			get	{ return _CreateDate; }
			set	{ _CreateDate = value; }
		}
		
		public bool Del
		{
			get	{ return _Del; }
			set	{ _Del = value; }
		}
		
		public bool IsNew
		{
			get 
			{ 
				return _isNew; 
			}
			set { _isNew = value; }
		}
		#endregion		

		#region Utilerias
		public static bool Existe(int CompanyID)
		{
			Database db = DatabaseFactory.CreateDatabase();
			string sqlCommand = "daab_ExistsCompany";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add in parameters
			db.AddInParameter(dbCommandWrapper, "@CompanyID", DbType.Int32, CompanyID);

			// DataSet that will hold the returned results		
			// Note: connection closed by ExecuteDataSet method call 
			bool ret = false;
			int num = Convert.ToInt32(db.ExecuteScalar(dbCommandWrapper));
			ret = num > 0;
			return ret;
		}
		
		public static DataTable GetAllCompany()
		{
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_GetAllCompany";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);
			DataTable ret = db.ExecuteDataSet(dbCommandWrapper).Tables[0];
			
            ret.PrimaryKey = new DataColumn[] { ret.Columns["CompanyID"] };
			
            return ret;
		}
		
		public static void SaveAll(DataTable tabla)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbDataAdapter da = db.GetDataAdapter();
			
			da.SelectCommand = db.GetStoredProcCommand("daab_GetAllCompany");
            da.InsertCommand = db.GetStoredProcCommand("daab_AddCompany");
            da.UpdateCommand = db.GetStoredProcCommand("daab_UpdateCompany");
            da.DeleteCommand = db.GetStoredProcCommand("daab_DeleteCompany");
			
			#region Parametros de InsertCommand
			db.AddInParameter(da.InsertCommand, "@CompanyID", DbType.Int32, "CompanyID", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@CompanyNumber", DbType.Int32, "CompanyNumber", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@CompanyName", DbType.String, "CompanyName", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@CompanyLogo", DbType.Binary, "CompanyLogo", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@Slogan", DbType.String, "Slogan", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@CurrencyName", DbType.String, "CurrencyName", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@CurrencySymbol", DbType.String, "CurrencySymbol", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@Description", DbType.String, "Description", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@CreateBy", DbType.Int32, "CreateBy", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@CreateDate", DbType.DateTime, "CreateDate", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@Del", DbType.Boolean, "Del", DataRowVersion.Default);

			#endregion
			
			#region Parametros de UpdateCommand
			db.AddInParameter(da.UpdateCommand, "@CompanyID", DbType.Int32, "CompanyID", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@CompanyNumber", DbType.Int32, "CompanyNumber", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@CompanyName", DbType.String, "CompanyName", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@CompanyLogo", DbType.Binary, "CompanyLogo", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@Slogan", DbType.String, "Slogan", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@CurrencyName", DbType.String, "CurrencyName", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@CurrencySymbol", DbType.String, "CurrencySymbol", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@Description", DbType.String, "Description", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@CreateBy", DbType.Int32, "CreateBy", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@CreateDate", DbType.DateTime, "CreateDate", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@Del", DbType.Boolean, "Del", DataRowVersion.Default);

			#endregion
			
			#region Parametros de DeleteCommand
			db.AddInParameter(da.DeleteCommand, "@CompanyID", DbType.Int32, "CompanyID", DataRowVersion.Default);

			#endregion

			db.UpdateDataSet(tabla.DataSet, tabla.TableName, da.InsertCommand, da.UpdateCommand, da.DeleteCommand, UpdateBehavior.Standard);
		}
		#endregion

		/// <summary>
		/// Populates a dataset with info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="CompanyID"></param>
		/// <returns>A DataSet containing the results of the query</returns>
		private DataSet LoadByPrimaryKey(int CompanyID)
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_GetCompany";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add in parameters
			db.AddInParameter(dbCommandWrapper, "@CompanyID", DbType.Int32, CompanyID);

			// DataSet that will hold the returned results		
			// Note: connection closed by ExecuteDataSet method call 
			return db.ExecuteDataSet(dbCommandWrapper);
		}
	
		/// <summary>
		/// Populates current instance of the object with info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="CompanyID"></param>
		public virtual void Load(int CompanyID)
		{
			// DataSet that will hold the returned results		
			DataSet ds = this.LoadByPrimaryKey(CompanyID);
			
			// Load member variables from datarow
			DataRow row = ds.Tables[0].Rows[0];
			_CompanyID = (int)row["CompanyID"];
			_CompanyNumber = row.IsNull("CompanyNumber") ? 0 : (int)row["CompanyNumber"];
			_CompanyName = row.IsNull("CompanyName") ? string.Empty : (string)row["CompanyName"];
			_CompanyLogo = row.IsNull("CompanyLogo") ? new byte[] {} : row["CompanyLogo"] as byte[];
			_Slogan = row.IsNull("Slogan") ? string.Empty : (string)row["Slogan"];
			_CurrencyName = row.IsNull("CurrencyName") ? string.Empty : (string)row["CurrencyName"];
			_CurrencySymbol = row.IsNull("CurrencySymbol") ? string.Empty : (string)row["CurrencySymbol"];
			_Description = row.IsNull("Description") ? string.Empty : (string)row["Description"];
			_CreateBy = row.IsNull("CreateBy") ? 0 : (int)row["CreateBy"];
			_CreateDate = row.IsNull("CreateDate") ? DateTime.Parse("01/01/1900") : (DateTime)row["CreateDate"];
			_Del = row.IsNull("Del") ? false : (bool)row["Del"];
		}

		/// <summary>
		/// Adds or updates information in the database depending on the primary key stored in the object instance.
		/// </summary>
		/// <returns>Returns True if saved successfully, False otherwise.</returns>
		public bool Save()
		{
			if (this.IsNew)
				return Insert();
			else
				return Update();
		}

		/// <summary>
		/// Inserts the current instance data into the database.
		/// </summary>
		/// <returns>Returns True if saved successfully, False otherwise.</returns>
		private bool Insert()
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_AddCompany";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add parameters
			db.AddInParameter(dbCommandWrapper, "@CompanyID", DbType.Int32, _CompanyID);
			db.AddInParameter(dbCommandWrapper, "@CompanyNumber", DbType.Int32, SetNullValue((_CompanyNumber == 0), _CompanyNumber));
			db.AddInParameter(dbCommandWrapper, "@CompanyName", DbType.String, SetNullValue((_CompanyName == string.Empty), _CompanyName));
			db.AddInParameter(dbCommandWrapper, "@CompanyLogo", DbType.Binary, SetNullValue((_CompanyLogo.Length == 0), _CompanyLogo));
			db.AddInParameter(dbCommandWrapper, "@Slogan", DbType.String, SetNullValue((_Slogan == string.Empty), _Slogan));
			db.AddInParameter(dbCommandWrapper, "@CurrencyName", DbType.String, SetNullValue((_CurrencyName == string.Empty), _CurrencyName));
			db.AddInParameter(dbCommandWrapper, "@CurrencySymbol", DbType.String, SetNullValue((_CurrencySymbol == string.Empty), _CurrencySymbol));
			db.AddInParameter(dbCommandWrapper, "@Description", DbType.String, SetNullValue((_Description == string.Empty), _Description));
			db.AddInParameter(dbCommandWrapper, "@CreateBy", DbType.Int32, SetNullValue((_CreateBy == 0), _CreateBy));
			db.AddInParameter(dbCommandWrapper, "@CreateDate", DbType.DateTime, SetNullValue((_CreateDate == DateTime.Parse("01/01/1900")), _CreateDate));
			db.AddInParameter(dbCommandWrapper, "@Del", DbType.Boolean, SetNullValue((_Del == false), _Del));

			db.ExecuteNonQuery(dbCommandWrapper);
			
			return true;
		}

		/// <summary>
		/// Updates the current instance data in the database.
		/// </summary>
		/// <returns>Returns True if saved successfully, False otherwise.</returns>
		public bool Update()
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_UpdateCompany";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add parameters
			db.AddInParameter(dbCommandWrapper, "@CompanyID", DbType.Int32, _CompanyID);
			db.AddInParameter(dbCommandWrapper, "@CompanyNumber", DbType.Int32, SetNullValue((_CompanyNumber == 0), _CompanyNumber));
			db.AddInParameter(dbCommandWrapper, "@CompanyName", DbType.String, SetNullValue((_CompanyName == string.Empty), _CompanyName));
			db.AddInParameter(dbCommandWrapper, "@CompanyLogo", DbType.Binary, SetNullValue((_CompanyLogo.Length == 0), _CompanyLogo));
			db.AddInParameter(dbCommandWrapper, "@Slogan", DbType.String, SetNullValue((_Slogan == string.Empty), _Slogan));
			db.AddInParameter(dbCommandWrapper, "@CurrencyName", DbType.String, SetNullValue((_CurrencyName == string.Empty), _CurrencyName));
			db.AddInParameter(dbCommandWrapper, "@CurrencySymbol", DbType.String, SetNullValue((_CurrencySymbol == string.Empty), _CurrencySymbol));
			db.AddInParameter(dbCommandWrapper, "@Description", DbType.String, SetNullValue((_Description == string.Empty), _Description));
			db.AddInParameter(dbCommandWrapper, "@CreateBy", DbType.Int32, SetNullValue((_CreateBy == 0), _CreateBy));
			db.AddInParameter(dbCommandWrapper, "@CreateDate", DbType.DateTime, SetNullValue((_CreateDate == DateTime.Parse("01/01/1900")), _CreateDate));
			db.AddInParameter(dbCommandWrapper, "@Del", DbType.Boolean, SetNullValue((_Del == false), _Del));

			try
			{
				db.ExecuteNonQuery(dbCommandWrapper);
				
				return true;
			}
			catch
			{
				return false;
			}
		}

		/// <summary>
		/// Removes info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="CompanyID"></param>
		public static void Remove(int CompanyID)
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_DeleteCompany";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add primary keys to command wrapper.
			db.AddInParameter(dbCommandWrapper, "@CompanyID", DbType.Int32, CompanyID);

			db.ExecuteNonQuery(dbCommandWrapper);
		}
		
		/// <summary>
		/// Serializes the current instance data to an Xml string.
		/// </summary>
		/// <returns>A string containing the Xml representation of the object.</returns>
		virtual public string ToXml()
		{
			// DataSet that will hold the returned results		
			DataSet ds = this.LoadByPrimaryKey(_CompanyID);
			StringWriter writer = new StringWriter(); 
			ds.WriteXml(writer); 
			return writer.ToString(); 
		}

		/// <summary>
		/// Utility function that returns a DBNull.Value if requested. The comparison is done inline
		/// in the Insert() and Update() functions.
		/// </summary>
		private object SetNullValue(bool isNullValue, object value)
		{
			if (isNullValue)
				return DBNull.Value;
			else
				return value;
		}
	}
}
