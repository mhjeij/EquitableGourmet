/*
'===============================================================================
'  Generated From - CSharp_DAAB_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL      = SQL_DAAB_Net2_StoredProcs.vbgen
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  YourObjectBase
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Collections.Specialized;
using System.Xml;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Data;
using System.Data.Common;

namespace EquitableGourmet
{
	public abstract class AccountBase
	{
		#region < VARIABLES >
		private int _AccountID;
		private string _CompanyName;
		private string _DisplayName;
		private string _MarigoldNumber;
		private byte[] _Logo;
		private string _Email;
		private string _Website;
		private string _Telephone1;
		private string _Telephone2;
		private int _AccountStatusID;
		private int _AccountTypeID;
		private int _AccountClassID;
		private int _AccountTitleID;
		private int _AccountIndustryID;
		private double _CreditLimit;
		private int _CreditDays;
		private DateTime _CreatedOn;
		private int _CreatedBy;
		private DateTime _ModifiedOn;
		private int _ModifiedBy;
		private bool _Del;
		private bool _isNew;
		#endregion
		
		#region < CONSTRUCTORES >
		protected AccountBase()
		{
			_AccountID = 0;
			_CompanyName = string.Empty;
			_DisplayName = string.Empty;
			_MarigoldNumber = string.Empty;
			_Logo = new byte[] {};
			_Email = string.Empty;
			_Website = string.Empty;
			_Telephone1 = string.Empty;
			_Telephone2 = string.Empty;
			_AccountStatusID = 0;
			_AccountTypeID = 0;
			_AccountClassID = 0;
			_AccountTitleID = 0;
			_AccountIndustryID = 0;
			_CreditLimit = 0;
			_CreditDays = 0;
			_CreatedOn = DateTime.Parse("01/01/1900");
			_CreatedBy = 0;
			_ModifiedOn = DateTime.Parse("01/01/1900");
			_ModifiedBy = 0;
			_Del = false;
		}
		
		protected AccountBase(int AccountID) : this()
		{
			_AccountID = AccountID;
		}
	
		protected AccountBase(int AccountID, string CompanyName, string DisplayName, string MarigoldNumber, byte[] Logo, string Email, string Website, string Telephone1, string Telephone2, int AccountStatusID, int AccountTypeID, int AccountClassID, int AccountTitleID, int AccountIndustryID, double CreditLimit, int CreditDays, DateTime CreatedOn, int CreatedBy, DateTime ModifiedOn, int ModifiedBy, bool Del) : this()
		{
			_AccountID = AccountID;
			_CompanyName = CompanyName;
			_DisplayName = DisplayName;
			_MarigoldNumber = MarigoldNumber;
			_Logo = Logo;
			_Email = Email;
			_Website = Website;
			_Telephone1 = Telephone1;
			_Telephone2 = Telephone2;
			_AccountStatusID = AccountStatusID;
			_AccountTypeID = AccountTypeID;
			_AccountClassID = AccountClassID;
			_AccountTitleID = AccountTitleID;
			_AccountIndustryID = AccountIndustryID;
			_CreditLimit = CreditLimit;
			_CreditDays = CreditDays;
			_CreatedOn = CreatedOn;
			_CreatedBy = CreatedBy;
			_ModifiedOn = ModifiedOn;
			_ModifiedBy = ModifiedBy;
			_Del = Del;
		}

		#endregion
		
		#region < Metodos para ObtenciÃ³n de Detalles >

		public static DataTable GetByAccountClass(int AccountClassID)
		{
			Database db = DatabaseFactory.CreateDatabase();
            string sqlCommand = "Select * From Account Where AccountClassID = @AccountClassID";
            DbCommand dbCommandWrapper = db.GetSqlStringCommand(sqlCommand);
			db.AddInParameter(dbCommandWrapper, "@AccountClassID", DbType.Int32, AccountClassID);

			DataTable t = db.ExecuteDataSet(dbCommandWrapper).Tables[0];
			
			t.Columns["AccountClassID"].DefaultValue = AccountClassID;

            return t;
		}

		public static DataTable GetByAccountIndustry(int AccountIndustryID)
		{
			Database db = DatabaseFactory.CreateDatabase();
            string sqlCommand = "Select * From Account Where AccountIndustryID = @AccountIndustryID";
            DbCommand dbCommandWrapper = db.GetSqlStringCommand(sqlCommand);
			db.AddInParameter(dbCommandWrapper, "@AccountIndustryID", DbType.Int32, AccountIndustryID);

			DataTable t = db.ExecuteDataSet(dbCommandWrapper).Tables[0];
			
			t.Columns["AccountIndustryID"].DefaultValue = AccountIndustryID;

            return t;
		}

		public static DataTable GetByAccountTitle(int AccountTitleID)
		{
			Database db = DatabaseFactory.CreateDatabase();
            string sqlCommand = "Select * From Account Where AccountTitleID = @AccountTitleID";
            DbCommand dbCommandWrapper = db.GetSqlStringCommand(sqlCommand);
			db.AddInParameter(dbCommandWrapper, "@AccountTitleID", DbType.Int32, AccountTitleID);

			DataTable t = db.ExecuteDataSet(dbCommandWrapper).Tables[0];
			
			t.Columns["AccountTitleID"].DefaultValue = AccountTitleID;

            return t;
		}

		public static DataTable GetByAccountType(int AccountTypeID)
		{
			Database db = DatabaseFactory.CreateDatabase();
            string sqlCommand = "Select * From Account Where AccountTypeID = @AccountTypeID";
            DbCommand dbCommandWrapper = db.GetSqlStringCommand(sqlCommand);
			db.AddInParameter(dbCommandWrapper, "@AccountTypeID", DbType.Int32, AccountTypeID);

			DataTable t = db.ExecuteDataSet(dbCommandWrapper).Tables[0];
			
			t.Columns["AccountTypeID"].DefaultValue = AccountTypeID;

            return t;
		}

		#endregion
		
		#region < PROPIEDADES >
		
		public int AccountID
		{
			get	{ return _AccountID; }
			set	{ _AccountID = value; }
		}
		
		public string CompanyName
		{
			get	{ return _CompanyName; }
			set	{ _CompanyName = value; }
		}
		
		public string DisplayName
		{
			get	{ return _DisplayName; }
			set	{ _DisplayName = value; }
		}
		
		public string MarigoldNumber
		{
			get	{ return _MarigoldNumber; }
			set	{ _MarigoldNumber = value; }
		}
		
		public byte[] Logo
		{
			get	{ return _Logo; }
			set	{ _Logo = value; }
		}
		
		public string Email
		{
			get	{ return _Email; }
			set	{ _Email = value; }
		}
		
		public string Website
		{
			get	{ return _Website; }
			set	{ _Website = value; }
		}
		
		public string Telephone1
		{
			get	{ return _Telephone1; }
			set	{ _Telephone1 = value; }
		}
		
		public string Telephone2
		{
			get	{ return _Telephone2; }
			set	{ _Telephone2 = value; }
		}
		
		public int AccountStatusID
		{
			get	{ return _AccountStatusID; }
			set	{ _AccountStatusID = value; }
		}
		
		public int AccountTypeID
		{
			get	{ return _AccountTypeID; }
			set	{ _AccountTypeID = value; }
		}
		
		public int AccountClassID
		{
			get	{ return _AccountClassID; }
			set	{ _AccountClassID = value; }
		}
		
		public int AccountTitleID
		{
			get	{ return _AccountTitleID; }
			set	{ _AccountTitleID = value; }
		}
		
		public int AccountIndustryID
		{
			get	{ return _AccountIndustryID; }
			set	{ _AccountIndustryID = value; }
		}
		
		public double CreditLimit
		{
			get	{ return _CreditLimit; }
			set	{ _CreditLimit = value; }
		}
		
		public int CreditDays
		{
			get	{ return _CreditDays; }
			set	{ _CreditDays = value; }
		}
		
		public DateTime CreatedOn
		{
			get	{ return _CreatedOn; }
			set	{ _CreatedOn = value; }
		}
		
		public int CreatedBy
		{
			get	{ return _CreatedBy; }
			set	{ _CreatedBy = value; }
		}
		
		public DateTime ModifiedOn
		{
			get	{ return _ModifiedOn; }
			set	{ _ModifiedOn = value; }
		}
		
		public int ModifiedBy
		{
			get	{ return _ModifiedBy; }
			set	{ _ModifiedBy = value; }
		}
		
		public bool Del
		{
			get	{ return _Del; }
			set	{ _Del = value; }
		}
		
		public bool IsNew
		{
			get 
			{ 
				_isNew = (_AccountID == 0);
				return _isNew; 
			}
			set { _isNew = value; }
		}
		#endregion		

		#region Utilerias
		public static bool Existe(int AccountID)
		{
			Database db = DatabaseFactory.CreateDatabase();
			string sqlCommand = "daab_ExistsAccount";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add in parameters
			db.AddInParameter(dbCommandWrapper, "@AccountID", DbType.Int32, AccountID);

			// DataSet that will hold the returned results		
			// Note: connection closed by ExecuteDataSet method call 
			bool ret = false;
			int num = Convert.ToInt32(db.ExecuteScalar(dbCommandWrapper));
			ret = num > 0;
			return ret;
		}
		
		public static DataTable GetAllAccount()
		{
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_GetAllAccount";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);
			DataTable ret = db.ExecuteDataSet(dbCommandWrapper).Tables[0];
			
            ret.PrimaryKey = new DataColumn[] { ret.Columns["AccountID"] };
			
            return ret;
		}
		
		public static void SaveAll(DataTable tabla)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbDataAdapter da = db.GetDataAdapter();
			
			da.SelectCommand = db.GetStoredProcCommand("daab_GetAllAccount");
            da.InsertCommand = db.GetStoredProcCommand("daab_AddAccount");
            da.UpdateCommand = db.GetStoredProcCommand("daab_UpdateAccount");
            da.DeleteCommand = db.GetStoredProcCommand("daab_DeleteAccount");
			
			#region Parametros de InsertCommand
			db.AddOutParameter(da.InsertCommand, "@AccountID", DbType.Int32, 4);
			db.AddInParameter(da.InsertCommand, "@CompanyName", DbType.String, "CompanyName", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@DisplayName", DbType.String, "DisplayName", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@MarigoldNumber", DbType.String, "MarigoldNumber", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@Logo", DbType.Binary, "Logo", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@Email", DbType.String, "Email", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@Website", DbType.String, "Website", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@Telephone1", DbType.String, "Telephone1", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@Telephone2", DbType.String, "Telephone2", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@AccountStatusID", DbType.Int32, "AccountStatusID", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@AccountTypeID", DbType.Int32, "AccountTypeID", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@AccountClassID", DbType.Int32, "AccountClassID", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@AccountTitleID", DbType.Int32, "AccountTitleID", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@AccountIndustryID", DbType.Int32, "AccountIndustryID", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@CreditLimit", DbType.Double, "CreditLimit", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@CreditDays", DbType.Int32, "CreditDays", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@CreatedOn", DbType.DateTime, "CreatedOn", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@CreatedBy", DbType.Int32, "CreatedBy", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@ModifiedOn", DbType.DateTime, "ModifiedOn", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@ModifiedBy", DbType.Int32, "ModifiedBy", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@Del", DbType.Boolean, "Del", DataRowVersion.Default);

			#endregion
			
			#region Parametros de UpdateCommand
			db.AddInParameter(da.UpdateCommand, "@AccountID", DbType.Int32, "AccountID", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@CompanyName", DbType.String, "CompanyName", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@DisplayName", DbType.String, "DisplayName", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@MarigoldNumber", DbType.String, "MarigoldNumber", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@Logo", DbType.Binary, "Logo", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@Email", DbType.String, "Email", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@Website", DbType.String, "Website", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@Telephone1", DbType.String, "Telephone1", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@Telephone2", DbType.String, "Telephone2", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@AccountStatusID", DbType.Int32, "AccountStatusID", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@AccountTypeID", DbType.Int32, "AccountTypeID", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@AccountClassID", DbType.Int32, "AccountClassID", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@AccountTitleID", DbType.Int32, "AccountTitleID", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@AccountIndustryID", DbType.Int32, "AccountIndustryID", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@CreditLimit", DbType.Double, "CreditLimit", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@CreditDays", DbType.Int32, "CreditDays", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@CreatedOn", DbType.DateTime, "CreatedOn", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@CreatedBy", DbType.Int32, "CreatedBy", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@ModifiedOn", DbType.DateTime, "ModifiedOn", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@ModifiedBy", DbType.Int32, "ModifiedBy", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@Del", DbType.Boolean, "Del", DataRowVersion.Default);

			#endregion
			
			#region Parametros de DeleteCommand
			db.AddInParameter(da.DeleteCommand, "@AccountID", DbType.Int32, "AccountID", DataRowVersion.Default);

			#endregion

			db.UpdateDataSet(tabla.DataSet, tabla.TableName, da.InsertCommand, da.UpdateCommand, da.DeleteCommand, UpdateBehavior.Standard);
		}
		#endregion

		/// <summary>
		/// Populates a dataset with info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="AccountID"></param>
		/// <returns>A DataSet containing the results of the query</returns>
		private DataSet LoadByPrimaryKey(int AccountID)
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_GetAccount";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add in parameters
			db.AddInParameter(dbCommandWrapper, "@AccountID", DbType.Int32, AccountID);

			// DataSet that will hold the returned results		
			// Note: connection closed by ExecuteDataSet method call 
			return db.ExecuteDataSet(dbCommandWrapper);
		}
	
		/// <summary>
		/// Populates current instance of the object with info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="AccountID"></param>
		public virtual void Load(int AccountID)
		{
			// DataSet that will hold the returned results		
			DataSet ds = this.LoadByPrimaryKey(AccountID);
			
			// Load member variables from datarow
			DataRow row = ds.Tables[0].Rows[0];
			_AccountID = (int)row["AccountID"];
			_CompanyName = row.IsNull("CompanyName") ? string.Empty : (string)row["CompanyName"];
			_DisplayName = row.IsNull("DisplayName") ? string.Empty : (string)row["DisplayName"];
			_MarigoldNumber = row.IsNull("MarigoldNumber") ? string.Empty : (string)row["MarigoldNumber"];
			_Logo = row.IsNull("Logo") ? new byte[] {} : row["Logo"] as byte[];
			_Email = row.IsNull("Email") ? string.Empty : (string)row["Email"];
			_Website = row.IsNull("Website") ? string.Empty : (string)row["Website"];
			_Telephone1 = row.IsNull("Telephone1") ? string.Empty : (string)row["Telephone1"];
			_Telephone2 = row.IsNull("Telephone2") ? string.Empty : (string)row["Telephone2"];
			_AccountStatusID = row.IsNull("AccountStatusID") ? 0 : (int)row["AccountStatusID"];
			_AccountTypeID = row.IsNull("AccountTypeID") ? 0 : (int)row["AccountTypeID"];
			_AccountClassID = row.IsNull("AccountClassID") ? 0 : (int)row["AccountClassID"];
			_AccountTitleID = row.IsNull("AccountTitleID") ? 0 : (int)row["AccountTitleID"];
			_AccountIndustryID = row.IsNull("AccountIndustryID") ? 0 : (int)row["AccountIndustryID"];
			_CreditLimit = row.IsNull("CreditLimit") ? 0 : (double)row["CreditLimit"];
			_CreditDays = row.IsNull("CreditDays") ? 0 : (int)row["CreditDays"];
			_CreatedOn = row.IsNull("CreatedOn") ? DateTime.Parse("01/01/1900") : (DateTime)row["CreatedOn"];
			_CreatedBy = row.IsNull("CreatedBy") ? 0 : (int)row["CreatedBy"];
			_ModifiedOn = row.IsNull("ModifiedOn") ? DateTime.Parse("01/01/1900") : (DateTime)row["ModifiedOn"];
			_ModifiedBy = row.IsNull("ModifiedBy") ? 0 : (int)row["ModifiedBy"];
			_Del = row.IsNull("Del") ? false : (bool)row["Del"];
		}

		/// <summary>
		/// Adds or updates information in the database depending on the primary key stored in the object instance.
		/// </summary>
		/// <returns>Returns True if saved successfully, False otherwise.</returns>
		public bool Save()
		{
			if (this.IsNew)
				return Insert();
			else
				return Update();
		}

		/// <summary>
		/// Inserts the current instance data into the database.
		/// </summary>
		/// <returns>Returns True if saved successfully, False otherwise.</returns>
		private bool Insert()
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_AddAccount";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add parameters
			db.AddOutParameter(dbCommandWrapper, "@AccountID", DbType.Int32, 4);
			db.AddInParameter(dbCommandWrapper, "@CompanyName", DbType.String, SetNullValue((_CompanyName == string.Empty), _CompanyName));
			db.AddInParameter(dbCommandWrapper, "@DisplayName", DbType.String, SetNullValue((_DisplayName == string.Empty), _DisplayName));
			db.AddInParameter(dbCommandWrapper, "@MarigoldNumber", DbType.String, SetNullValue((_MarigoldNumber == string.Empty), _MarigoldNumber));
			db.AddInParameter(dbCommandWrapper, "@Logo", DbType.Binary, SetNullValue((_Logo.Length == 0), _Logo));
			db.AddInParameter(dbCommandWrapper, "@Email", DbType.String, SetNullValue((_Email == string.Empty), _Email));
			db.AddInParameter(dbCommandWrapper, "@Website", DbType.String, SetNullValue((_Website == string.Empty), _Website));
			db.AddInParameter(dbCommandWrapper, "@Telephone1", DbType.String, SetNullValue((_Telephone1 == string.Empty), _Telephone1));
			db.AddInParameter(dbCommandWrapper, "@Telephone2", DbType.String, SetNullValue((_Telephone2 == string.Empty), _Telephone2));
			db.AddInParameter(dbCommandWrapper, "@AccountStatusID", DbType.Int32, SetNullValue((_AccountStatusID == 0), _AccountStatusID));
			db.AddInParameter(dbCommandWrapper, "@AccountTypeID", DbType.Int32, SetNullValue((_AccountTypeID == 0), _AccountTypeID));
			db.AddInParameter(dbCommandWrapper, "@AccountClassID", DbType.Int32, SetNullValue((_AccountClassID == 0), _AccountClassID));
			db.AddInParameter(dbCommandWrapper, "@AccountTitleID", DbType.Int32, SetNullValue((_AccountTitleID == 0), _AccountTitleID));
			db.AddInParameter(dbCommandWrapper, "@AccountIndustryID", DbType.Int32, SetNullValue((_AccountIndustryID == 0), _AccountIndustryID));
			db.AddInParameter(dbCommandWrapper, "@CreditLimit", DbType.Double, SetNullValue((_CreditLimit == 0), _CreditLimit));
			db.AddInParameter(dbCommandWrapper, "@CreditDays", DbType.Int32, SetNullValue((_CreditDays == 0), _CreditDays));
			db.AddInParameter(dbCommandWrapper, "@CreatedOn", DbType.DateTime, SetNullValue((_CreatedOn == DateTime.Parse("01/01/1900")), _CreatedOn));
			db.AddInParameter(dbCommandWrapper, "@CreatedBy", DbType.Int32, SetNullValue((_CreatedBy == 0), _CreatedBy));
			db.AddInParameter(dbCommandWrapper, "@ModifiedOn", DbType.DateTime, SetNullValue((_ModifiedOn == DateTime.Parse("01/01/1900")), _ModifiedOn));
			db.AddInParameter(dbCommandWrapper, "@ModifiedBy", DbType.Int32, SetNullValue((_ModifiedBy == 0), _ModifiedBy));
			db.AddInParameter(dbCommandWrapper, "@Del", DbType.Boolean, SetNullValue((_Del == true), _Del));

			db.ExecuteNonQuery(dbCommandWrapper);
			
			// Save output parameter values
			object param;
			param = db.GetParameterValue(dbCommandWrapper, "@AccountID");
			if (param == DBNull.Value) return false;
			_AccountID = (int)param;
			
			return true;
		}

		/// <summary>
		/// Updates the current instance data in the database.
		/// </summary>
		/// <returns>Returns True if saved successfully, False otherwise.</returns>
		public bool Update()
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_UpdateAccount";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add parameters
			db.AddInParameter(dbCommandWrapper, "@AccountID", DbType.Int32, _AccountID);
			db.AddInParameter(dbCommandWrapper, "@CompanyName", DbType.String, SetNullValue((_CompanyName == string.Empty), _CompanyName));
			db.AddInParameter(dbCommandWrapper, "@DisplayName", DbType.String, SetNullValue((_DisplayName == string.Empty), _DisplayName));
			db.AddInParameter(dbCommandWrapper, "@MarigoldNumber", DbType.String, SetNullValue((_MarigoldNumber == string.Empty), _MarigoldNumber));
			db.AddInParameter(dbCommandWrapper, "@Logo", DbType.Binary, SetNullValue((_Logo.Length == 0), _Logo));
			db.AddInParameter(dbCommandWrapper, "@Email", DbType.String, SetNullValue((_Email == string.Empty), _Email));
			db.AddInParameter(dbCommandWrapper, "@Website", DbType.String, SetNullValue((_Website == string.Empty), _Website));
			db.AddInParameter(dbCommandWrapper, "@Telephone1", DbType.String, SetNullValue((_Telephone1 == string.Empty), _Telephone1));
			db.AddInParameter(dbCommandWrapper, "@Telephone2", DbType.String, SetNullValue((_Telephone2 == string.Empty), _Telephone2));
			db.AddInParameter(dbCommandWrapper, "@AccountStatusID", DbType.Int32, SetNullValue((_AccountStatusID == 0), _AccountStatusID));
			db.AddInParameter(dbCommandWrapper, "@AccountTypeID", DbType.Int32, SetNullValue((_AccountTypeID == 0), _AccountTypeID));
			db.AddInParameter(dbCommandWrapper, "@AccountClassID", DbType.Int32, SetNullValue((_AccountClassID == 0), _AccountClassID));
			db.AddInParameter(dbCommandWrapper, "@AccountTitleID", DbType.Int32, SetNullValue((_AccountTitleID == 0), _AccountTitleID));
			db.AddInParameter(dbCommandWrapper, "@AccountIndustryID", DbType.Int32, SetNullValue((_AccountIndustryID == 0), _AccountIndustryID));
			db.AddInParameter(dbCommandWrapper, "@CreditLimit", DbType.Double, SetNullValue((_CreditLimit == 0), _CreditLimit));
			db.AddInParameter(dbCommandWrapper, "@CreditDays", DbType.Int32, SetNullValue((_CreditDays == 0), _CreditDays));
			db.AddInParameter(dbCommandWrapper, "@CreatedOn", DbType.DateTime, SetNullValue((_CreatedOn == DateTime.Parse("01/01/1900")), _CreatedOn));
			db.AddInParameter(dbCommandWrapper, "@CreatedBy", DbType.Int32, SetNullValue((_CreatedBy == 0), _CreatedBy));
			db.AddInParameter(dbCommandWrapper, "@ModifiedOn", DbType.DateTime, SetNullValue((_ModifiedOn == DateTime.Parse("01/01/1900")), _ModifiedOn));
			db.AddInParameter(dbCommandWrapper, "@ModifiedBy", DbType.Int32, SetNullValue((_ModifiedBy == 0), _ModifiedBy));
			db.AddInParameter(dbCommandWrapper, "@Del", DbType.Boolean, SetNullValue((_Del == false), _Del));

			try
			{
				db.ExecuteNonQuery(dbCommandWrapper);
				
				// Save output parameter values
				object param;
				param = db.GetParameterValue(dbCommandWrapper, "@AccountID");
				if (param == DBNull.Value) return false;
				_AccountID = (int)param;
				
				return true;
			}
			catch
			{
				return false;
			}
		}

		/// <summary>
		/// Removes info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="AccountID"></param>
		public static void Remove(int AccountID)
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_DeleteAccount";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add primary keys to command wrapper.
			db.AddInParameter(dbCommandWrapper, "@AccountID", DbType.Int32, AccountID);

			db.ExecuteNonQuery(dbCommandWrapper);
		}
		
		/// <summary>
		/// Serializes the current instance data to an Xml string.
		/// </summary>
		/// <returns>A string containing the Xml representation of the object.</returns>
		virtual public string ToXml()
		{
			// DataSet that will hold the returned results		
			DataSet ds = this.LoadByPrimaryKey(_AccountID);
			StringWriter writer = new StringWriter(); 
			ds.WriteXml(writer); 
			return writer.ToString(); 
		}

		/// <summary>
		/// Utility function that returns a DBNull.Value if requested. The comparison is done inline
		/// in the Insert() and Update() functions.
		/// </summary>
		private object SetNullValue(bool isNullValue, object value)
		{
			if (isNullValue)
				return DBNull.Value;
			else
				return value;
		}
	}
}
