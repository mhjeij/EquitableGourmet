/*
'===============================================================================
'  Generated From - CSharp_DAAB_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL      = SQL_DAAB_Net2_StoredProcs.vbgen
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  YourObjectBase
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Collections.Specialized;
using System.Xml;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Data;
using System.Data.Common;

namespace EquitableGourmet
{
	public abstract class ProductBase
	{
		#region < VARIABLES >
		private int _ProductID;
		private string _Name;
		private string _Code;
		private byte[] _Photo;
		private string _Description;
		private string _NutritionalFactsInfo;
		private int _UnitSize;
		private int _PackSize;
		private double _PricePerCase;
		private double _UnitPrice;
		private DateTime _ExpiryDate;
		private int _ProductCategoryID;
		private int _ProductBrandID;
		private int _ParentProductID;
		private int _ShelfLifePerMonth;
		private bool _Del;
		private bool _isNew;
		#endregion
		
		#region < CONSTRUCTORES >
		protected ProductBase()
		{
			_ProductID = 0;
			_Name = string.Empty;
			_Code = string.Empty;
			_Photo = new byte[] {};
			_Description = string.Empty;
			_NutritionalFactsInfo = string.Empty;
			_UnitSize = 0;
			_PackSize = 0;
			_PricePerCase = 0;
			_UnitPrice = 0;
			_ExpiryDate = DateTime.Parse("01/01/1900");
			_ProductCategoryID = 0;
			_ProductBrandID = 0;
			_ParentProductID = 0;
			_ShelfLifePerMonth = 0;
			_Del = false;
		}
		
		protected ProductBase(int ProductID) : this()
		{
			_ProductID = ProductID;
		}
	
		protected ProductBase(int ProductID, string Name, string Code, byte[] Photo, string Description, string NutritionalFactsInfo, int UnitSize, int PackSize, double PricePerCase, double UnitPrice, DateTime ExpiryDate, int ProductCategoryID, int ProductBrandID, int ParentProductID, int ShelfLifePerMonth, bool Del) : this()
		{
			_ProductID = ProductID;
			_Name = Name;
			_Code = Code;
			_Photo = Photo;
			_Description = Description;
			_NutritionalFactsInfo = NutritionalFactsInfo;
			_UnitSize = UnitSize;
			_PackSize = PackSize;
			_PricePerCase = PricePerCase;
			_UnitPrice = UnitPrice;
			_ExpiryDate = ExpiryDate;
			_ProductCategoryID = ProductCategoryID;
			_ProductBrandID = ProductBrandID;
			_ParentProductID = ParentProductID;
			_ShelfLifePerMonth = ShelfLifePerMonth;
			_Del = Del;
		}

		#endregion
		
		#region < Metodos para ObtenciÃ³n de Detalles >

		public static DataTable GetByProductBrand(int ProductBrandID)
		{
			Database db = DatabaseFactory.CreateDatabase();
            string sqlCommand = "Select * From Product Where ProductBrandID = @ProductBrandID";
            DbCommand dbCommandWrapper = db.GetSqlStringCommand(sqlCommand);
			db.AddInParameter(dbCommandWrapper, "@ProductBrandID", DbType.Int32, ProductBrandID);

			DataTable t = db.ExecuteDataSet(dbCommandWrapper).Tables[0];
			
			t.Columns["ProductBrandID"].DefaultValue = ProductBrandID;

            return t;
		}

		public static DataTable GetByProductCategory(int ProductCategoryID)
		{
			Database db = DatabaseFactory.CreateDatabase();
            string sqlCommand = "Select * From Product Where ProductCategoryID = @ProductCategoryID";
            DbCommand dbCommandWrapper = db.GetSqlStringCommand(sqlCommand);
			db.AddInParameter(dbCommandWrapper, "@ProductCategoryID", DbType.Int32, ProductCategoryID);

			DataTable t = db.ExecuteDataSet(dbCommandWrapper).Tables[0];
			
			t.Columns["ProductCategoryID"].DefaultValue = ProductCategoryID;

            return t;
		}

		#endregion
		
		#region < PROPIEDADES >
		
		public int ProductID
		{
			get	{ return _ProductID; }
			set	{ _ProductID = value; }
		}
		
		public string Name
		{
			get	{ return _Name; }
			set	{ _Name = value; }
		}
		
		public string Code
		{
			get	{ return _Code; }
			set	{ _Code = value; }
		}
		
		public byte[] Photo
		{
			get	{ return _Photo; }
			set	{ _Photo = value; }
		}
		
		public string Description
		{
			get	{ return _Description; }
			set	{ _Description = value; }
		}
		
		public string NutritionalFactsInfo
		{
			get	{ return _NutritionalFactsInfo; }
			set	{ _NutritionalFactsInfo = value; }
		}
		
		public int UnitSize
		{
			get	{ return _UnitSize; }
			set	{ _UnitSize = value; }
		}
		
		public int PackSize
		{
			get	{ return _PackSize; }
			set	{ _PackSize = value; }
		}
		
		public double PricePerCase
		{
			get	{ return _PricePerCase; }
			set	{ _PricePerCase = value; }
		}
		
		public double UnitPrice
		{
			get	{ return _UnitPrice; }
			set	{ _UnitPrice = value; }
		}
		
		public DateTime ExpiryDate
		{
			get	{ return _ExpiryDate; }
			set	{ _ExpiryDate = value; }
		}
		
		public int ProductCategoryID
		{
			get	{ return _ProductCategoryID; }
			set	{ _ProductCategoryID = value; }
		}
		
		public int ProductBrandID
		{
			get	{ return _ProductBrandID; }
			set	{ _ProductBrandID = value; }
		}
		
		public int ParentProductID
		{
			get	{ return _ParentProductID; }
			set	{ _ParentProductID = value; }
		}
		
		public int ShelfLifePerMonth
		{
			get	{ return _ShelfLifePerMonth; }
			set	{ _ShelfLifePerMonth = value; }
		}
		
		public bool Del
		{
			get	{ return _Del; }
			set	{ _Del = value; }
		}
		
		public bool IsNew
		{
			get 
			{ 
				_isNew = (_ProductID == 0);
				return _isNew; 
			}
			set { _isNew = value; }
		}
		#endregion		

		#region Utilerias
		public static bool Existe(int ProductID)
		{
			Database db = DatabaseFactory.CreateDatabase();
			string sqlCommand = "daab_ExistsProduct";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add in parameters
			db.AddInParameter(dbCommandWrapper, "@ProductID", DbType.Int32, ProductID);

			// DataSet that will hold the returned results		
			// Note: connection closed by ExecuteDataSet method call 
			bool ret = false;
			int num = Convert.ToInt32(db.ExecuteScalar(dbCommandWrapper));
			ret = num > 0;
			return ret;
		}
		
		public static DataTable GetAllProduct()
		{
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_GetAllProduct";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);
			DataTable ret = db.ExecuteDataSet(dbCommandWrapper).Tables[0];
			
            ret.PrimaryKey = new DataColumn[] { ret.Columns["ProductID"] };
			
            return ret;
		}
		
		public static void SaveAll(DataTable tabla)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbDataAdapter da = db.GetDataAdapter();
			
			da.SelectCommand = db.GetStoredProcCommand("daab_GetAllProduct");
            da.InsertCommand = db.GetStoredProcCommand("daab_AddProduct");
            da.UpdateCommand = db.GetStoredProcCommand("daab_UpdateProduct");
            da.DeleteCommand = db.GetStoredProcCommand("daab_DeleteProduct");
			
			#region Parametros de InsertCommand
			db.AddOutParameter(da.InsertCommand, "@ProductID", DbType.Int32, 4);
			db.AddInParameter(da.InsertCommand, "@Name", DbType.String, "Name", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@Code", DbType.String, "Code", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@Photo", DbType.Binary, "Photo", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@Description", DbType.String, "Description", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@NutritionalFactsInfo", DbType.String, "NutritionalFactsInfo", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@UnitSize", DbType.Int32, "UnitSize", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@PackSize", DbType.Int32, "PackSize", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@PricePerCase", DbType.Double, "PricePerCase", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@UnitPrice", DbType.Double, "UnitPrice", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@ExpiryDate", DbType.DateTime, "ExpiryDate", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@ProductCategoryID", DbType.Int32, "ProductCategoryID", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@ProductBrandID", DbType.Int32, "ProductBrandID", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@ParentProductID", DbType.Int32, "ParentProductID", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@ShelfLifePerMonth", DbType.Int32, "ShelfLifePerMonth", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@Del", DbType.Boolean, "Del", DataRowVersion.Default);

			#endregion
			
			#region Parametros de UpdateCommand
			db.AddInParameter(da.UpdateCommand, "@ProductID", DbType.Int32, "ProductID", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@Name", DbType.String, "Name", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@Code", DbType.String, "Code", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@Photo", DbType.Binary, "Photo", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@Description", DbType.String, "Description", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@NutritionalFactsInfo", DbType.String, "NutritionalFactsInfo", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@UnitSize", DbType.Int32, "UnitSize", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@PackSize", DbType.Int32, "PackSize", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@PricePerCase", DbType.Double, "PricePerCase", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@UnitPrice", DbType.Double, "UnitPrice", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@ExpiryDate", DbType.DateTime, "ExpiryDate", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@ProductCategoryID", DbType.Int32, "ProductCategoryID", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@ProductBrandID", DbType.Int32, "ProductBrandID", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@ParentProductID", DbType.Int32, "ParentProductID", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@ShelfLifePerMonth", DbType.Int32, "ShelfLifePerMonth", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@Del", DbType.Boolean, "Del", DataRowVersion.Default);

			#endregion
			
			#region Parametros de DeleteCommand
			db.AddInParameter(da.DeleteCommand, "@ProductID", DbType.Int32, "ProductID", DataRowVersion.Default);

			#endregion

			db.UpdateDataSet(tabla.DataSet, tabla.TableName, da.InsertCommand, da.UpdateCommand, da.DeleteCommand, UpdateBehavior.Standard);
		}
		#endregion

		/// <summary>
		/// Populates a dataset with info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="ProductID"></param>
		/// <returns>A DataSet containing the results of the query</returns>
		private DataSet LoadByPrimaryKey(int ProductID)
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_GetProduct";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add in parameters
			db.AddInParameter(dbCommandWrapper, "@ProductID", DbType.Int32, ProductID);

			// DataSet that will hold the returned results		
			// Note: connection closed by ExecuteDataSet method call 
			return db.ExecuteDataSet(dbCommandWrapper);
		}
	
		/// <summary>
		/// Populates current instance of the object with info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="ProductID"></param>
		public virtual void Load(int ProductID)
		{
			// DataSet that will hold the returned results		
			DataSet ds = this.LoadByPrimaryKey(ProductID);
			
			// Load member variables from datarow
			DataRow row = ds.Tables[0].Rows[0];
			_ProductID = (int)row["ProductID"];
			_Name = row.IsNull("Name") ? string.Empty : (string)row["Name"];
			_Code = row.IsNull("Code") ? string.Empty : (string)row["Code"];
			_Photo = row.IsNull("Photo") ? new byte[] {} : row["Photo"] as byte[];
			_Description = row.IsNull("Description") ? string.Empty : (string)row["Description"];
			_NutritionalFactsInfo = row.IsNull("NutritionalFactsInfo") ? string.Empty : (string)row["NutritionalFactsInfo"];
			_UnitSize = row.IsNull("UnitSize") ? 0 : (int)row["UnitSize"];
			_PackSize = row.IsNull("PackSize") ? 0 : (int)row["PackSize"];
			_PricePerCase = row.IsNull("PricePerCase") ? 0 : (double)row["PricePerCase"];
			_UnitPrice = row.IsNull("UnitPrice") ? 0 : (double)row["UnitPrice"];
			_ExpiryDate = row.IsNull("ExpiryDate") ? DateTime.Parse("01/01/1900") : (DateTime)row["ExpiryDate"];
			_ProductCategoryID = row.IsNull("ProductCategoryID") ? 0 : (int)row["ProductCategoryID"];
			_ProductBrandID = row.IsNull("ProductBrandID") ? 0 : (int)row["ProductBrandID"];
			_ParentProductID = row.IsNull("ParentProductID") ? 0 : (int)row["ParentProductID"];
			_ShelfLifePerMonth = row.IsNull("ShelfLifePerMonth") ? 0 : (int)row["ShelfLifePerMonth"];
			_Del = row.IsNull("Del") ? false : (bool)row["Del"];
		}

		/// <summary>
		/// Adds or updates information in the database depending on the primary key stored in the object instance.
		/// </summary>
		/// <returns>Returns True if saved successfully, False otherwise.</returns>
		public bool Save()
		{
			if (this.IsNew)
				return Insert();
			else
				return Update();
		}

		/// <summary>
		/// Inserts the current instance data into the database.
		/// </summary>
		/// <returns>Returns True if saved successfully, False otherwise.</returns>
		private bool Insert()
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_AddProduct";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add parameters
			db.AddOutParameter(dbCommandWrapper, "@ProductID", DbType.Int32, 4);
			db.AddInParameter(dbCommandWrapper, "@Name", DbType.String, SetNullValue((_Name == string.Empty), _Name));
			db.AddInParameter(dbCommandWrapper, "@Code", DbType.String, SetNullValue((_Code == string.Empty), _Code));
			db.AddInParameter(dbCommandWrapper, "@Photo", DbType.Binary, SetNullValue((_Photo.Length == 0), _Photo));
			db.AddInParameter(dbCommandWrapper, "@Description", DbType.String, SetNullValue((_Description == string.Empty), _Description));
			db.AddInParameter(dbCommandWrapper, "@NutritionalFactsInfo", DbType.String, SetNullValue((_NutritionalFactsInfo == string.Empty), _NutritionalFactsInfo));
			db.AddInParameter(dbCommandWrapper, "@UnitSize", DbType.Int32, SetNullValue((_UnitSize == 0), _UnitSize));
			db.AddInParameter(dbCommandWrapper, "@PackSize", DbType.Int32, SetNullValue((_PackSize == 0), _PackSize));
			db.AddInParameter(dbCommandWrapper, "@PricePerCase", DbType.Double, SetNullValue((_PricePerCase == 0), _PricePerCase));
			db.AddInParameter(dbCommandWrapper, "@UnitPrice", DbType.Double, SetNullValue((_UnitPrice == 0), _UnitPrice));
			db.AddInParameter(dbCommandWrapper, "@ExpiryDate", DbType.DateTime, SetNullValue((_ExpiryDate == DateTime.Parse("01/01/1900")), _ExpiryDate));
			db.AddInParameter(dbCommandWrapper, "@ProductCategoryID", DbType.Int32, SetNullValue((_ProductCategoryID == 0), _ProductCategoryID));
			db.AddInParameter(dbCommandWrapper, "@ProductBrandID", DbType.Int32, SetNullValue((_ProductBrandID == 0), _ProductBrandID));
			db.AddInParameter(dbCommandWrapper, "@ParentProductID", DbType.Int32, SetNullValue((_ParentProductID == 0), _ParentProductID));
			db.AddInParameter(dbCommandWrapper, "@ShelfLifePerMonth", DbType.Int32, SetNullValue((_ShelfLifePerMonth == 0), _ShelfLifePerMonth));
            db.AddInParameter(dbCommandWrapper, "@Del", DbType.Boolean, SetNullValue((_Del == true), _Del));

			db.ExecuteNonQuery(dbCommandWrapper);
			
			// Save output parameter values
			object param;
			param = db.GetParameterValue(dbCommandWrapper, "@ProductID");
			if (param == DBNull.Value) return false;
			_ProductID = (int)param;
			
			return true;
		}

		/// <summary>
		/// Updates the current instance data in the database.
		/// </summary>
		/// <returns>Returns True if saved successfully, False otherwise.</returns>
		public bool Update()
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_UpdateProduct";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add parameters
			db.AddInParameter(dbCommandWrapper, "@ProductID", DbType.Int32, _ProductID);
			db.AddInParameter(dbCommandWrapper, "@Name", DbType.String, SetNullValue((_Name == string.Empty), _Name));
			db.AddInParameter(dbCommandWrapper, "@Code", DbType.String, SetNullValue((_Code == string.Empty), _Code));
			db.AddInParameter(dbCommandWrapper, "@Photo", DbType.Binary, SetNullValue((_Photo.Length == 0), _Photo));
			db.AddInParameter(dbCommandWrapper, "@Description", DbType.String, SetNullValue((_Description == string.Empty), _Description));
			db.AddInParameter(dbCommandWrapper, "@NutritionalFactsInfo", DbType.String, SetNullValue((_NutritionalFactsInfo == string.Empty), _NutritionalFactsInfo));
			db.AddInParameter(dbCommandWrapper, "@UnitSize", DbType.Int32, SetNullValue((_UnitSize == 0), _UnitSize));
			db.AddInParameter(dbCommandWrapper, "@PackSize", DbType.Int32, SetNullValue((_PackSize == 0), _PackSize));
			db.AddInParameter(dbCommandWrapper, "@PricePerCase", DbType.Double, SetNullValue((_PricePerCase == 0), _PricePerCase));
			db.AddInParameter(dbCommandWrapper, "@UnitPrice", DbType.Double, SetNullValue((_UnitPrice == 0), _UnitPrice));
			db.AddInParameter(dbCommandWrapper, "@ExpiryDate", DbType.DateTime, SetNullValue((_ExpiryDate == DateTime.Parse("01/01/1900")), _ExpiryDate));
			db.AddInParameter(dbCommandWrapper, "@ProductCategoryID", DbType.Int32, SetNullValue((_ProductCategoryID == 0), _ProductCategoryID));
			db.AddInParameter(dbCommandWrapper, "@ProductBrandID", DbType.Int32, SetNullValue((_ProductBrandID == 0), _ProductBrandID));
			db.AddInParameter(dbCommandWrapper, "@ParentProductID", DbType.Int32, SetNullValue((_ParentProductID == 0), _ParentProductID));
			db.AddInParameter(dbCommandWrapper, "@ShelfLifePerMonth", DbType.Int32, SetNullValue((_ShelfLifePerMonth == 0), _ShelfLifePerMonth));
			db.AddInParameter(dbCommandWrapper, "@Del", DbType.Boolean, SetNullValue((_Del == false), _Del));

			try
			{
				db.ExecuteNonQuery(dbCommandWrapper);
				
				// Save output parameter values
				object param;
				param = db.GetParameterValue(dbCommandWrapper, "@ProductID");
				if (param == DBNull.Value) return false;
				_ProductID = (int)param;
				
				return true;
			}
			catch
			{
				return false;
			}
		}

		/// <summary>
		/// Removes info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="ProductID"></param>
		public static void Remove(int ProductID)
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_DeleteProduct";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add primary keys to command wrapper.
			db.AddInParameter(dbCommandWrapper, "@ProductID", DbType.Int32, ProductID);

			db.ExecuteNonQuery(dbCommandWrapper);
		}
		
		/// <summary>
		/// Serializes the current instance data to an Xml string.
		/// </summary>
		/// <returns>A string containing the Xml representation of the object.</returns>
		virtual public string ToXml()
		{
			// DataSet that will hold the returned results		
			DataSet ds = this.LoadByPrimaryKey(_ProductID);
			StringWriter writer = new StringWriter(); 
			ds.WriteXml(writer); 
			return writer.ToString(); 
		}

		/// <summary>
		/// Utility function that returns a DBNull.Value if requested. The comparison is done inline
		/// in the Insert() and Update() functions.
		/// </summary>
		private object SetNullValue(bool isNullValue, object value)
		{
			if (isNullValue)
				return DBNull.Value;
			else
				return value;
		}
	}
}
