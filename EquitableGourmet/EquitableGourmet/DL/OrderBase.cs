/*
'===============================================================================
'  Generated From - CSharp_DAAB_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL      = SQL_DAAB_Net2_StoredProcs.vbgen
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  YourObjectBase
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Collections.Specialized;
using System.Xml;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Data;
using System.Data.Common;

namespace DL
{
	public abstract class OrderBase
	{
		#region < VARIABLES >
		private int _OrderID;
		private string _Number;
		private string _Name;
		private string _Description;
		private DateTime _OrderDate;
		private int _OrderStatusID;
		private int _CustomerID;
		private int _ProductCount;
		private double _SubTotal;
		private double _TotalDiscount;
		private double _TotalTax;
		private double _Total;
		private DateTime _CreatedOn;
		private int _CreatedBy;
		private DateTime _ModifiedOn;
		private int _ModifiedBy;
		private bool _Del;
		private bool _isNew;
		#endregion
		
		#region < CONSTRUCTORES >
		protected OrderBase()
		{
			_OrderID = 0;
			_Number = string.Empty;
			_Name = string.Empty;
			_Description = string.Empty;
			_OrderDate = DateTime.Parse("01/01/1900");
			_OrderStatusID = 0;
			_CustomerID = 0;
			_ProductCount = 0;
			_SubTotal = 0;
			_TotalDiscount = 0;
			_TotalTax = 0;
			_Total = 0;
			_CreatedOn = DateTime.Parse("01/01/1900");
			_CreatedBy = 0;
			_ModifiedOn = DateTime.Parse("01/01/1900");
			_ModifiedBy = 0;
			_Del = false;
		}
		
		protected OrderBase(int OrderID) : this()
		{
			_OrderID = OrderID;
		}
	
		protected OrderBase(int OrderID, string Number, string Name, string Description, DateTime OrderDate, int OrderStatusID, int CustomerID, int ProductCount, double SubTotal, double TotalDiscount, double TotalTax, double Total, DateTime CreatedOn, int CreatedBy, DateTime ModifiedOn, int ModifiedBy, bool Del) : this()
		{
			_OrderID = OrderID;
			_Number = Number;
			_Name = Name;
			_Description = Description;
			_OrderDate = OrderDate;
			_OrderStatusID = OrderStatusID;
			_CustomerID = CustomerID;
			_ProductCount = ProductCount;
			_SubTotal = SubTotal;
			_TotalDiscount = TotalDiscount;
			_TotalTax = TotalTax;
			_Total = Total;
			_CreatedOn = CreatedOn;
			_CreatedBy = CreatedBy;
			_ModifiedOn = ModifiedOn;
			_ModifiedBy = ModifiedBy;
			_Del = Del;
		}

		#endregion
		
		#region < Metodos para ObtenciÃ³n de Detalles >

		public static DataTable GetByAccount(int CustomerID)
		{
			Database db = DatabaseFactory.CreateDatabase();
            string sqlCommand = "Select * From Order Where CustomerID = @CustomerID";
            DbCommand dbCommandWrapper = db.GetSqlStringCommand(sqlCommand);
			db.AddInParameter(dbCommandWrapper, "@CustomerID", DbType.Int32, CustomerID);

			DataTable t = db.ExecuteDataSet(dbCommandWrapper).Tables[0];
			
			t.Columns["CustomerID"].DefaultValue = CustomerID;

            return t;
		}

		public static DataTable GetByOrderStatus(int OrderStatusID)
		{
			Database db = DatabaseFactory.CreateDatabase();
            string sqlCommand = "Select * From Order Where OrderStatusID = @OrderStatusID";
            DbCommand dbCommandWrapper = db.GetSqlStringCommand(sqlCommand);
			db.AddInParameter(dbCommandWrapper, "@OrderStatusID", DbType.Int32, OrderStatusID);

			DataTable t = db.ExecuteDataSet(dbCommandWrapper).Tables[0];
			
			t.Columns["OrderStatusID"].DefaultValue = OrderStatusID;

            return t;
		}

		#endregion
		
		#region < PROPIEDADES >
		
		public int OrderID
		{
			get	{ return _OrderID; }
			set	{ _OrderID = value; }
		}
		
		public string Number
		{
			get	{ return _Number; }
			set	{ _Number = value; }
		}
		
		public string Name
		{
			get	{ return _Name; }
			set	{ _Name = value; }
		}
		
		public string Description
		{
			get	{ return _Description; }
			set	{ _Description = value; }
		}
		
		public DateTime OrderDate
		{
			get	{ return _OrderDate; }
			set	{ _OrderDate = value; }
		}
		
		public int OrderStatusID
		{
			get	{ return _OrderStatusID; }
			set	{ _OrderStatusID = value; }
		}
		
		public int CustomerID
		{
			get	{ return _CustomerID; }
			set	{ _CustomerID = value; }
		}
		
		public int ProductCount
		{
			get	{ return _ProductCount; }
			set	{ _ProductCount = value; }
		}
		
		public double SubTotal
		{
			get	{ return _SubTotal; }
			set	{ _SubTotal = value; }
		}
		
		public double TotalDiscount
		{
			get	{ return _TotalDiscount; }
			set	{ _TotalDiscount = value; }
		}
		
		public double TotalTax
		{
			get	{ return _TotalTax; }
			set	{ _TotalTax = value; }
		}
		
		public double Total
		{
			get	{ return _Total; }
			set	{ _Total = value; }
		}
		
		public DateTime CreatedOn
		{
			get	{ return _CreatedOn; }
			set	{ _CreatedOn = value; }
		}
		
		public int CreatedBy
		{
			get	{ return _CreatedBy; }
			set	{ _CreatedBy = value; }
		}
		
		public DateTime ModifiedOn
		{
			get	{ return _ModifiedOn; }
			set	{ _ModifiedOn = value; }
		}
		
		public int ModifiedBy
		{
			get	{ return _ModifiedBy; }
			set	{ _ModifiedBy = value; }
		}
		
		public bool Del
		{
			get	{ return _Del; }
			set	{ _Del = value; }
		}
		
		public bool IsNew
		{
			get 
			{ 
				_isNew = (_OrderID == 0);
				return _isNew; 
			}
			set { _isNew = value; }
		}
		#endregion		

		#region Utilerias
		public static bool Existe(int OrderID)
		{
			Database db = DatabaseFactory.CreateDatabase();
			string sqlCommand = "daab_ExistsOrder";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add in parameters
			db.AddInParameter(dbCommandWrapper, "@OrderID", DbType.Int32, OrderID);

			// DataSet that will hold the returned results		
			// Note: connection closed by ExecuteDataSet method call 
			bool ret = false;
			int num = Convert.ToInt32(db.ExecuteScalar(dbCommandWrapper));
			ret = num > 0;
			return ret;
		}
		
		public static DataTable GetAllOrder()
		{
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_GetAllOrder";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);
			DataTable ret = db.ExecuteDataSet(dbCommandWrapper).Tables[0];
			
            ret.PrimaryKey = new DataColumn[] { ret.Columns["OrderID"] };
			
            return ret;
		}
		
		public static void SaveAll(DataTable tabla)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbDataAdapter da = db.GetDataAdapter();
			
			da.SelectCommand = db.GetStoredProcCommand("daab_GetAllOrder");
            da.InsertCommand = db.GetStoredProcCommand("daab_AddOrder");
            da.UpdateCommand = db.GetStoredProcCommand("daab_UpdateOrder");
            da.DeleteCommand = db.GetStoredProcCommand("daab_DeleteOrder");
			
			#region Parametros de InsertCommand
			db.AddOutParameter(da.InsertCommand, "@OrderID", DbType.Int32, 4);
			db.AddInParameter(da.InsertCommand, "@Number", DbType.String, "Number", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@Name", DbType.String, "Name", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@Description", DbType.String, "Description", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@OrderDate", DbType.DateTime, "OrderDate", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@OrderStatusID", DbType.Int32, "OrderStatusID", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@CustomerID", DbType.Int32, "CustomerID", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@ProductCount", DbType.Int32, "ProductCount", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@SubTotal", DbType.Double, "SubTotal", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@TotalDiscount", DbType.Double, "TotalDiscount", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@TotalTax", DbType.Double, "TotalTax", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@Total", DbType.Double, "Total", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@CreatedOn", DbType.DateTime, "CreatedOn", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@CreatedBy", DbType.Int32, "CreatedBy", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@ModifiedOn", DbType.DateTime, "ModifiedOn", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@ModifiedBy", DbType.Int32, "ModifiedBy", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@Del", DbType.Boolean, "Del", DataRowVersion.Default);

			#endregion
			
			#region Parametros de UpdateCommand
			db.AddInParameter(da.UpdateCommand, "@OrderID", DbType.Int32, "OrderID", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@Number", DbType.String, "Number", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@Name", DbType.String, "Name", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@Description", DbType.String, "Description", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@OrderDate", DbType.DateTime, "OrderDate", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@OrderStatusID", DbType.Int32, "OrderStatusID", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@CustomerID", DbType.Int32, "CustomerID", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@ProductCount", DbType.Int32, "ProductCount", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@SubTotal", DbType.Double, "SubTotal", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@TotalDiscount", DbType.Double, "TotalDiscount", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@TotalTax", DbType.Double, "TotalTax", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@Total", DbType.Double, "Total", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@CreatedOn", DbType.DateTime, "CreatedOn", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@CreatedBy", DbType.Int32, "CreatedBy", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@ModifiedOn", DbType.DateTime, "ModifiedOn", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@ModifiedBy", DbType.Int32, "ModifiedBy", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@Del", DbType.Boolean, "Del", DataRowVersion.Default);

			#endregion
			
			#region Parametros de DeleteCommand
			db.AddInParameter(da.DeleteCommand, "@OrderID", DbType.Int32, "OrderID", DataRowVersion.Default);

			#endregion

			db.UpdateDataSet(tabla.DataSet, tabla.TableName, da.InsertCommand, da.UpdateCommand, da.DeleteCommand, UpdateBehavior.Standard);
		}
		#endregion

		/// <summary>
		/// Populates a dataset with info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="OrderID"></param>
		/// <returns>A DataSet containing the results of the query</returns>
		private DataSet LoadByPrimaryKey(int OrderID)
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_GetOrder";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add in parameters
			db.AddInParameter(dbCommandWrapper, "@OrderID", DbType.Int32, OrderID);

			// DataSet that will hold the returned results		
			// Note: connection closed by ExecuteDataSet method call 
			return db.ExecuteDataSet(dbCommandWrapper);
		}
	
		/// <summary>
		/// Populates current instance of the object with info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="OrderID"></param>
		public virtual void Load(int OrderID)
		{
			// DataSet that will hold the returned results		
			DataSet ds = this.LoadByPrimaryKey(OrderID);
			
			// Load member variables from datarow
			DataRow row = ds.Tables[0].Rows[0];
			_OrderID = (int)row["OrderID"];
			_Number = row.IsNull("Number") ? string.Empty : (string)row["Number"];
			_Name = row.IsNull("Name") ? string.Empty : (string)row["Name"];
			_Description = row.IsNull("Description") ? string.Empty : (string)row["Description"];
			_OrderDate = row.IsNull("OrderDate") ? DateTime.Parse("01/01/1900") : (DateTime)row["OrderDate"];
			_OrderStatusID = row.IsNull("OrderStatusID") ? 0 : (int)row["OrderStatusID"];
			_CustomerID = row.IsNull("CustomerID") ? 0 : (int)row["CustomerID"];
			_ProductCount = row.IsNull("ProductCount") ? 0 : (int)row["ProductCount"];
			_SubTotal = row.IsNull("SubTotal") ? 0 : (double)row["SubTotal"];
			_TotalDiscount = row.IsNull("TotalDiscount") ? 0 : (double)row["TotalDiscount"];
			_TotalTax = row.IsNull("TotalTax") ? 0 : (double)row["TotalTax"];
			_Total = row.IsNull("Total") ? 0 : (double)row["Total"];
			_CreatedOn = row.IsNull("CreatedOn") ? DateTime.Parse("01/01/1900") : (DateTime)row["CreatedOn"];
			_CreatedBy = row.IsNull("CreatedBy") ? 0 : (int)row["CreatedBy"];
			_ModifiedOn = row.IsNull("ModifiedOn") ? DateTime.Parse("01/01/1900") : (DateTime)row["ModifiedOn"];
			_ModifiedBy = row.IsNull("ModifiedBy") ? 0 : (int)row["ModifiedBy"];
			_Del = row.IsNull("Del") ? false : (bool)row["Del"];
		}

		/// <summary>
		/// Adds or updates information in the database depending on the primary key stored in the object instance.
		/// </summary>
		/// <returns>Returns True if saved successfully, False otherwise.</returns>
		public bool Save()
		{
			if (this.IsNew)
				return Insert();
			else
				return Update();
		}

		/// <summary>
		/// Inserts the current instance data into the database.
		/// </summary>
		/// <returns>Returns True if saved successfully, False otherwise.</returns>
		private bool Insert()
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_AddOrder";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add parameters
			db.AddOutParameter(dbCommandWrapper, "@OrderID", DbType.Int32, 4);
			db.AddInParameter(dbCommandWrapper, "@Number", DbType.String, SetNullValue((_Number == string.Empty), _Number));
			db.AddInParameter(dbCommandWrapper, "@Name", DbType.String, SetNullValue((_Name == string.Empty), _Name));
			db.AddInParameter(dbCommandWrapper, "@Description", DbType.String, SetNullValue((_Description == string.Empty), _Description));
			db.AddInParameter(dbCommandWrapper, "@OrderDate", DbType.DateTime, SetNullValue((_OrderDate == DateTime.Parse("01/01/1900")), _OrderDate));
			db.AddInParameter(dbCommandWrapper, "@OrderStatusID", DbType.Int32, SetNullValue((_OrderStatusID == 0), _OrderStatusID));
			db.AddInParameter(dbCommandWrapper, "@CustomerID", DbType.Int32, SetNullValue((_CustomerID == 0), _CustomerID));
			db.AddInParameter(dbCommandWrapper, "@ProductCount", DbType.Int32, SetNullValue((_ProductCount == 0), _ProductCount));
			db.AddInParameter(dbCommandWrapper, "@SubTotal", DbType.Double, SetNullValue((_SubTotal == 0), _SubTotal));
			db.AddInParameter(dbCommandWrapper, "@TotalDiscount", DbType.Double, SetNullValue((_TotalDiscount == 0), _TotalDiscount));
			db.AddInParameter(dbCommandWrapper, "@TotalTax", DbType.Double, SetNullValue((_TotalTax == 0), _TotalTax));
			db.AddInParameter(dbCommandWrapper, "@Total", DbType.Double, SetNullValue((_Total == 0), _Total));
			db.AddInParameter(dbCommandWrapper, "@CreatedOn", DbType.DateTime, SetNullValue((_CreatedOn == DateTime.Parse("01/01/1900")), _CreatedOn));
			db.AddInParameter(dbCommandWrapper, "@CreatedBy", DbType.Int32, SetNullValue((_CreatedBy == 0), _CreatedBy));
			db.AddInParameter(dbCommandWrapper, "@ModifiedOn", DbType.DateTime, SetNullValue((_ModifiedOn == DateTime.Parse("01/01/1900")), _ModifiedOn));
			db.AddInParameter(dbCommandWrapper, "@ModifiedBy", DbType.Int32, SetNullValue((_ModifiedBy == 0), _ModifiedBy));
			db.AddInParameter(dbCommandWrapper, "@Del", DbType.Boolean, SetNullValue((_Del == false), _Del));

			db.ExecuteNonQuery(dbCommandWrapper);
			
			// Save output parameter values
			object param;
			param = db.GetParameterValue(dbCommandWrapper, "@OrderID");
			if (param == DBNull.Value) return false;
			_OrderID = (int)param;
			
			return true;
		}

		/// <summary>
		/// Updates the current instance data in the database.
		/// </summary>
		/// <returns>Returns True if saved successfully, False otherwise.</returns>
		public bool Update()
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_UpdateOrder";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add parameters
			db.AddInParameter(dbCommandWrapper, "@OrderID", DbType.Int32, _OrderID);
			db.AddInParameter(dbCommandWrapper, "@Number", DbType.String, SetNullValue((_Number == string.Empty), _Number));
			db.AddInParameter(dbCommandWrapper, "@Name", DbType.String, SetNullValue((_Name == string.Empty), _Name));
			db.AddInParameter(dbCommandWrapper, "@Description", DbType.String, SetNullValue((_Description == string.Empty), _Description));
			db.AddInParameter(dbCommandWrapper, "@OrderDate", DbType.DateTime, SetNullValue((_OrderDate == DateTime.Parse("01/01/1900")), _OrderDate));
			db.AddInParameter(dbCommandWrapper, "@OrderStatusID", DbType.Int32, SetNullValue((_OrderStatusID == 0), _OrderStatusID));
			db.AddInParameter(dbCommandWrapper, "@CustomerID", DbType.Int32, SetNullValue((_CustomerID == 0), _CustomerID));
			db.AddInParameter(dbCommandWrapper, "@ProductCount", DbType.Int32, SetNullValue((_ProductCount == 0), _ProductCount));
			db.AddInParameter(dbCommandWrapper, "@SubTotal", DbType.Double, SetNullValue((_SubTotal == 0), _SubTotal));
			db.AddInParameter(dbCommandWrapper, "@TotalDiscount", DbType.Double, SetNullValue((_TotalDiscount == 0), _TotalDiscount));
			db.AddInParameter(dbCommandWrapper, "@TotalTax", DbType.Double, SetNullValue((_TotalTax == 0), _TotalTax));
			db.AddInParameter(dbCommandWrapper, "@Total", DbType.Double, SetNullValue((_Total == 0), _Total));
			db.AddInParameter(dbCommandWrapper, "@CreatedOn", DbType.DateTime, SetNullValue((_CreatedOn == DateTime.Parse("01/01/1900")), _CreatedOn));
			db.AddInParameter(dbCommandWrapper, "@CreatedBy", DbType.Int32, SetNullValue((_CreatedBy == 0), _CreatedBy));
			db.AddInParameter(dbCommandWrapper, "@ModifiedOn", DbType.DateTime, SetNullValue((_ModifiedOn == DateTime.Parse("01/01/1900")), _ModifiedOn));
			db.AddInParameter(dbCommandWrapper, "@ModifiedBy", DbType.Int32, SetNullValue((_ModifiedBy == 0), _ModifiedBy));
			db.AddInParameter(dbCommandWrapper, "@Del", DbType.Boolean, SetNullValue((_Del == false), _Del));

			try
			{
				db.ExecuteNonQuery(dbCommandWrapper);
				
				// Save output parameter values
				object param;
				param = db.GetParameterValue(dbCommandWrapper, "@OrderID");
				if (param == DBNull.Value) return false;
				_OrderID = (int)param;
				
				return true;
			}
			catch
			{
				return false;
			}
		}

		/// <summary>
		/// Removes info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="OrderID"></param>
		public static void Remove(int OrderID)
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_DeleteOrder";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add primary keys to command wrapper.
			db.AddInParameter(dbCommandWrapper, "@OrderID", DbType.Int32, OrderID);

			db.ExecuteNonQuery(dbCommandWrapper);
		}
		
		/// <summary>
		/// Serializes the current instance data to an Xml string.
		/// </summary>
		/// <returns>A string containing the Xml representation of the object.</returns>
		virtual public string ToXml()
		{
			// DataSet that will hold the returned results		
			DataSet ds = this.LoadByPrimaryKey(_OrderID);
			StringWriter writer = new StringWriter(); 
			ds.WriteXml(writer); 
			return writer.ToString(); 
		}

		/// <summary>
		/// Utility function that returns a DBNull.Value if requested. The comparison is done inline
		/// in the Insert() and Update() functions.
		/// </summary>
		private object SetNullValue(bool isNullValue, object value)
		{
			if (isNullValue)
				return DBNull.Value;
			else
				return value;
		}
	}
}
