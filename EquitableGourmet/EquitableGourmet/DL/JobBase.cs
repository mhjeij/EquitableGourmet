/*
'===============================================================================
'  Generated From - CSharp_DAAB_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL      = SQL_DAAB_Net2_StoredProcs.vbgen
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  YourObjectBase
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Collections.Specialized;
using System.Xml;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Data;
using System.Data.Common;

namespace DL
{
	public abstract class JobBase
	{
		#region < VARIABLES >
		private int _JobID;
		private string _Name;
		private DateTime _StartDate;
		private DateTime _EndDate;
		private DateTime _CreatedOn;
		private int _CreatedBy;
		private string _Description;
		private int _JobStatusID;
		private bool _Del;
		private bool _isNew;
		#endregion
		
		#region < CONSTRUCTORES >
		protected JobBase()
		{
			_JobID = 0;
			_Name = string.Empty;
			_StartDate = DateTime.Parse("01/01/1900");
			_EndDate = DateTime.Parse("01/01/1900");
			_CreatedOn = DateTime.Parse("01/01/1900");
			_CreatedBy = 0;
			_Description = string.Empty;
			_JobStatusID = 0;
			_Del = false;
		}
		
		protected JobBase(int JobID) : this()
		{
			_JobID = JobID;
		}
	
		protected JobBase(int JobID, string Name, DateTime StartDate, DateTime EndDate, DateTime CreatedOn, int CreatedBy, string Description, int JobStatusID, bool Del) : this()
		{
			_JobID = JobID;
			_Name = Name;
			_StartDate = StartDate;
			_EndDate = EndDate;
			_CreatedOn = CreatedOn;
			_CreatedBy = CreatedBy;
			_Description = Description;
			_JobStatusID = JobStatusID;
			_Del = Del;
		}

		#endregion
		
		#region < Metodos para ObtenciÃ³n de Detalles >

		public static DataTable GetByJobStatus(int JobStatusID)
		{
			Database db = DatabaseFactory.CreateDatabase();
            string sqlCommand = "Select * From Job Where JobStatusID = @JobStatusID";
            DbCommand dbCommandWrapper = db.GetSqlStringCommand(sqlCommand);
			db.AddInParameter(dbCommandWrapper, "@JobStatusID", DbType.Int32, JobStatusID);

			DataTable t = db.ExecuteDataSet(dbCommandWrapper).Tables[0];
			
			t.Columns["JobStatusID"].DefaultValue = JobStatusID;

            return t;
		}

		#endregion
		
		#region < PROPIEDADES >
		
		public int JobID
		{
			get	{ return _JobID; }
			set	{ _JobID = value; }
		}
		
		public string Name
		{
			get	{ return _Name; }
			set	{ _Name = value; }
		}
		
		public DateTime StartDate
		{
			get	{ return _StartDate; }
			set	{ _StartDate = value; }
		}
		
		public DateTime EndDate
		{
			get	{ return _EndDate; }
			set	{ _EndDate = value; }
		}
		
		public DateTime CreatedOn
		{
			get	{ return _CreatedOn; }
			set	{ _CreatedOn = value; }
		}
		
		public int CreatedBy
		{
			get	{ return _CreatedBy; }
			set	{ _CreatedBy = value; }
		}
		
		public string Description
		{
			get	{ return _Description; }
			set	{ _Description = value; }
		}
		
		public int JobStatusID
		{
			get	{ return _JobStatusID; }
			set	{ _JobStatusID = value; }
		}
		
		public bool Del
		{
			get	{ return _Del; }
			set	{ _Del = value; }
		}
		
		public bool IsNew
		{
			get 
			{ 
				_isNew = (_JobID == 0);
				return _isNew; 
			}
			set { _isNew = value; }
		}
		#endregion		

		#region Utilerias
		public static bool Existe(int JobID)
		{
			Database db = DatabaseFactory.CreateDatabase();
			string sqlCommand = "daab_ExistsJob";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add in parameters
			db.AddInParameter(dbCommandWrapper, "@JobID", DbType.Int32, JobID);

			// DataSet that will hold the returned results		
			// Note: connection closed by ExecuteDataSet method call 
			bool ret = false;
			int num = Convert.ToInt32(db.ExecuteScalar(dbCommandWrapper));
			ret = num > 0;
			return ret;
		}
		
		public static DataTable GetAllJob()
		{
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_GetAllJob";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);
			DataTable ret = db.ExecuteDataSet(dbCommandWrapper).Tables[0];
			
            ret.PrimaryKey = new DataColumn[] { ret.Columns["JobID"] };
			
            return ret;
		}
		
		public static void SaveAll(DataTable tabla)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbDataAdapter da = db.GetDataAdapter();
			
			da.SelectCommand = db.GetStoredProcCommand("daab_GetAllJob");
            da.InsertCommand = db.GetStoredProcCommand("daab_AddJob");
            da.UpdateCommand = db.GetStoredProcCommand("daab_UpdateJob");
            da.DeleteCommand = db.GetStoredProcCommand("daab_DeleteJob");
			
			#region Parametros de InsertCommand
			db.AddOutParameter(da.InsertCommand, "@JobID", DbType.Int32, 4);
			db.AddInParameter(da.InsertCommand, "@Name", DbType.String, "Name", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@StartDate", DbType.DateTime, "StartDate", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@EndDate", DbType.DateTime, "EndDate", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@CreatedOn", DbType.DateTime, "CreatedOn", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@CreatedBy", DbType.Int32, "CreatedBy", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@Description", DbType.String, "Description", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@JobStatusID", DbType.Int32, "JobStatusID", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@Del", DbType.Boolean, "Del", DataRowVersion.Default);

			#endregion
			
			#region Parametros de UpdateCommand
			db.AddInParameter(da.UpdateCommand, "@JobID", DbType.Int32, "JobID", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@Name", DbType.String, "Name", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@StartDate", DbType.DateTime, "StartDate", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@EndDate", DbType.DateTime, "EndDate", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@CreatedOn", DbType.DateTime, "CreatedOn", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@CreatedBy", DbType.Int32, "CreatedBy", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@Description", DbType.String, "Description", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@JobStatusID", DbType.Int32, "JobStatusID", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@Del", DbType.Boolean, "Del", DataRowVersion.Default);

			#endregion
			
			#region Parametros de DeleteCommand
			db.AddInParameter(da.DeleteCommand, "@JobID", DbType.Int32, "JobID", DataRowVersion.Default);

			#endregion

			db.UpdateDataSet(tabla.DataSet, tabla.TableName, da.InsertCommand, da.UpdateCommand, da.DeleteCommand, UpdateBehavior.Standard);
		}
		#endregion

		/// <summary>
		/// Populates a dataset with info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="JobID"></param>
		/// <returns>A DataSet containing the results of the query</returns>
		private DataSet LoadByPrimaryKey(int JobID)
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_GetJob";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add in parameters
			db.AddInParameter(dbCommandWrapper, "@JobID", DbType.Int32, JobID);

			// DataSet that will hold the returned results		
			// Note: connection closed by ExecuteDataSet method call 
			return db.ExecuteDataSet(dbCommandWrapper);
		}
	
		/// <summary>
		/// Populates current instance of the object with info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="JobID"></param>
		public virtual void Load(int JobID)
		{
			// DataSet that will hold the returned results		
			DataSet ds = this.LoadByPrimaryKey(JobID);
			
			// Load member variables from datarow
			DataRow row = ds.Tables[0].Rows[0];
			_JobID = (int)row["JobID"];
			_Name = row.IsNull("Name") ? string.Empty : (string)row["Name"];
			_StartDate = row.IsNull("StartDate") ? DateTime.Parse("01/01/1900") : (DateTime)row["StartDate"];
			_EndDate = row.IsNull("EndDate") ? DateTime.Parse("01/01/1900") : (DateTime)row["EndDate"];
			_CreatedOn = row.IsNull("CreatedOn") ? DateTime.Parse("01/01/1900") : (DateTime)row["CreatedOn"];
			_CreatedBy = row.IsNull("CreatedBy") ? 0 : (int)row["CreatedBy"];
			_Description = row.IsNull("Description") ? string.Empty : (string)row["Description"];
			_JobStatusID = row.IsNull("JobStatusID") ? 0 : (int)row["JobStatusID"];
			_Del = row.IsNull("Del") ? false : (bool)row["Del"];
		}

		/// <summary>
		/// Adds or updates information in the database depending on the primary key stored in the object instance.
		/// </summary>
		/// <returns>Returns True if saved successfully, False otherwise.</returns>
		public bool Save()
		{
			if (this.IsNew)
				return Insert();
			else
				return Update();
		}

		/// <summary>
		/// Inserts the current instance data into the database.
		/// </summary>
		/// <returns>Returns True if saved successfully, False otherwise.</returns>
		private bool Insert()
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_AddJob";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add parameters
			db.AddOutParameter(dbCommandWrapper, "@JobID", DbType.Int32, 4);
			db.AddInParameter(dbCommandWrapper, "@Name", DbType.String, SetNullValue((_Name == string.Empty), _Name));
			db.AddInParameter(dbCommandWrapper, "@StartDate", DbType.DateTime, SetNullValue((_StartDate == DateTime.Parse("01/01/1900")), _StartDate));
			db.AddInParameter(dbCommandWrapper, "@EndDate", DbType.DateTime, SetNullValue((_EndDate == DateTime.Parse("01/01/1900")), _EndDate));
			db.AddInParameter(dbCommandWrapper, "@CreatedOn", DbType.DateTime, SetNullValue((_CreatedOn == DateTime.Parse("01/01/1900")), _CreatedOn));
			db.AddInParameter(dbCommandWrapper, "@CreatedBy", DbType.Int32, SetNullValue((_CreatedBy == 0), _CreatedBy));
			db.AddInParameter(dbCommandWrapper, "@Description", DbType.String, SetNullValue((_Description == string.Empty), _Description));
			db.AddInParameter(dbCommandWrapper, "@JobStatusID", DbType.Int32, SetNullValue((_JobStatusID == 0), _JobStatusID));
			db.AddInParameter(dbCommandWrapper, "@Del", DbType.Boolean, SetNullValue((_Del == false), _Del));

			db.ExecuteNonQuery(dbCommandWrapper);
			
			// Save output parameter values
			object param;
			param = db.GetParameterValue(dbCommandWrapper, "@JobID");
			if (param == DBNull.Value) return false;
			_JobID = (int)param;
			
			return true;
		}

		/// <summary>
		/// Updates the current instance data in the database.
		/// </summary>
		/// <returns>Returns True if saved successfully, False otherwise.</returns>
		public bool Update()
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_UpdateJob";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add parameters
			db.AddInParameter(dbCommandWrapper, "@JobID", DbType.Int32, _JobID);
			db.AddInParameter(dbCommandWrapper, "@Name", DbType.String, SetNullValue((_Name == string.Empty), _Name));
			db.AddInParameter(dbCommandWrapper, "@StartDate", DbType.DateTime, SetNullValue((_StartDate == DateTime.Parse("01/01/1900")), _StartDate));
			db.AddInParameter(dbCommandWrapper, "@EndDate", DbType.DateTime, SetNullValue((_EndDate == DateTime.Parse("01/01/1900")), _EndDate));
			db.AddInParameter(dbCommandWrapper, "@CreatedOn", DbType.DateTime, SetNullValue((_CreatedOn == DateTime.Parse("01/01/1900")), _CreatedOn));
			db.AddInParameter(dbCommandWrapper, "@CreatedBy", DbType.Int32, SetNullValue((_CreatedBy == 0), _CreatedBy));
			db.AddInParameter(dbCommandWrapper, "@Description", DbType.String, SetNullValue((_Description == string.Empty), _Description));
			db.AddInParameter(dbCommandWrapper, "@JobStatusID", DbType.Int32, SetNullValue((_JobStatusID == 0), _JobStatusID));
			db.AddInParameter(dbCommandWrapper, "@Del", DbType.Boolean, SetNullValue((_Del == false), _Del));

			try
			{
				db.ExecuteNonQuery(dbCommandWrapper);
				
				// Save output parameter values
				object param;
				param = db.GetParameterValue(dbCommandWrapper, "@JobID");
				if (param == DBNull.Value) return false;
				_JobID = (int)param;
				
				return true;
			}
			catch
			{
				return false;
			}
		}

		/// <summary>
		/// Removes info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="JobID"></param>
		public static void Remove(int JobID)
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_DeleteJob";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add primary keys to command wrapper.
			db.AddInParameter(dbCommandWrapper, "@JobID", DbType.Int32, JobID);

			db.ExecuteNonQuery(dbCommandWrapper);
		}
		
		/// <summary>
		/// Serializes the current instance data to an Xml string.
		/// </summary>
		/// <returns>A string containing the Xml representation of the object.</returns>
		virtual public string ToXml()
		{
			// DataSet that will hold the returned results		
			DataSet ds = this.LoadByPrimaryKey(_JobID);
			StringWriter writer = new StringWriter(); 
			ds.WriteXml(writer); 
			return writer.ToString(); 
		}

		/// <summary>
		/// Utility function that returns a DBNull.Value if requested. The comparison is done inline
		/// in the Insert() and Update() functions.
		/// </summary>
		private object SetNullValue(bool isNullValue, object value)
		{
			if (isNullValue)
				return DBNull.Value;
			else
				return value;
		}
	}
}
