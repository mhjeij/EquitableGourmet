/*
'===============================================================================
'  Generated From - CSharp_DAAB_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL      = SQL_DAAB_Net2_StoredProcs.vbgen
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  YourObjectBase
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Collections.Specialized;
using System.Xml;
using System.IO;

using Microsoft.Practices.EnterpriseLibrary.Data;
using System.Data.Common;

namespace DL
{
	public abstract class AspNetUserLoginsBase
	{
		#region < VARIABLES >
		private string _LoginProvider;
		private string _ProviderKey;
		private string _UserId;
		private bool _isNew;
		#endregion
		
		#region < CONSTRUCTORES >
		protected AspNetUserLoginsBase()
		{
			_LoginProvider = string.Empty;
			_ProviderKey = string.Empty;
			_UserId = string.Empty;
		}
		
		protected AspNetUserLoginsBase(string LoginProvider, string ProviderKey, string UserId) : this()
		{
			_LoginProvider = LoginProvider;
			_ProviderKey = ProviderKey;
			_UserId = UserId;
		}

		#endregion
		
		#region < Metodos para ObtenciÃ³n de Detalles >

		public static DataTable GetByAspNetUsers(string UserId)
		{
			Database db = DatabaseFactory.CreateDatabase();
            string sqlCommand = "Select * From AspNetUserLogins Where UserId = @UserId";
            DbCommand dbCommandWrapper = db.GetSqlStringCommand(sqlCommand);
			db.AddInParameter(dbCommandWrapper, "@UserId", DbType.String, UserId);

			DataTable t = db.ExecuteDataSet(dbCommandWrapper).Tables[0];
			
			t.Columns["UserId"].DefaultValue = UserId;

            return t;
		}

		#endregion
		
		#region < PROPIEDADES >
		
		public string LoginProvider
		{
			get	{ return _LoginProvider; }
			set	{ _LoginProvider = value; }
		}
		
		public string ProviderKey
		{
			get	{ return _ProviderKey; }
			set	{ _ProviderKey = value; }
		}
		
		public string UserId
		{
			get	{ return _UserId; }
			set	{ _UserId = value; }
		}
		
		public bool IsNew
		{
			get 
			{ 
				return _isNew; 
			}
			set { _isNew = value; }
		}
		#endregion		

		#region Utilerias
		public static bool Existe(string LoginProvider, string ProviderKey, string UserId)
		{
			Database db = DatabaseFactory.CreateDatabase();
			string sqlCommand = "daab_ExistsAspNetUserLogins";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add in parameters
			db.AddInParameter(dbCommandWrapper, "@LoginProvider", DbType.String, LoginProvider);
			db.AddInParameter(dbCommandWrapper, "@ProviderKey", DbType.String, ProviderKey);
			db.AddInParameter(dbCommandWrapper, "@UserId", DbType.String, UserId);

			// DataSet that will hold the returned results		
			// Note: connection closed by ExecuteDataSet method call 
			bool ret = false;
			int num = Convert.ToInt32(db.ExecuteScalar(dbCommandWrapper));
			ret = num > 0;
			return ret;
		}
		
		public static DataTable GetAllAspNetUserLogins()
		{
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_GetAllAspNetUserLogins";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);
			DataTable ret = db.ExecuteDataSet(dbCommandWrapper).Tables[0];
			
            ret.PrimaryKey = new DataColumn[] { ret.Columns["LoginProvider"], ret.Columns["ProviderKey"], ret.Columns["UserId"] };
			
            return ret;
		}
		
		public static void SaveAll(DataTable tabla)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbDataAdapter da = db.GetDataAdapter();
			
			da.SelectCommand = db.GetStoredProcCommand("daab_GetAllAspNetUserLogins");
            da.InsertCommand = db.GetStoredProcCommand("daab_AddAspNetUserLogins");
            da.UpdateCommand = db.GetStoredProcCommand("daab_UpdateAspNetUserLogins");
            da.DeleteCommand = db.GetStoredProcCommand("daab_DeleteAspNetUserLogins");
			
			#region Parametros de InsertCommand
			db.AddInParameter(da.InsertCommand, "@LoginProvider", DbType.String, "LoginProvider", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@ProviderKey", DbType.String, "ProviderKey", DataRowVersion.Default);
			db.AddInParameter(da.InsertCommand, "@UserId", DbType.String, "UserId", DataRowVersion.Default);

			#endregion
			
			#region Parametros de UpdateCommand
			db.AddInParameter(da.UpdateCommand, "@LoginProvider", DbType.String, "LoginProvider", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@ProviderKey", DbType.String, "ProviderKey", DataRowVersion.Default);
			db.AddInParameter(da.UpdateCommand, "@UserId", DbType.String, "UserId", DataRowVersion.Default);

			#endregion
			
			#region Parametros de DeleteCommand
			db.AddInParameter(da.DeleteCommand, "@LoginProvider", DbType.String, "LoginProvider", DataRowVersion.Default);
			db.AddInParameter(da.DeleteCommand, "@ProviderKey", DbType.String, "ProviderKey", DataRowVersion.Default);
			db.AddInParameter(da.DeleteCommand, "@UserId", DbType.String, "UserId", DataRowVersion.Default);

			#endregion

			db.UpdateDataSet(tabla.DataSet, tabla.TableName, da.InsertCommand, da.UpdateCommand, da.DeleteCommand, UpdateBehavior.Standard);
		}
		#endregion

		/// <summary>
		/// Populates a dataset with info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="LoginProvider"></param>
		/// <param name="ProviderKey"></param>
		/// <param name="UserId"></param>
		/// <returns>A DataSet containing the results of the query</returns>
		private DataSet LoadByPrimaryKey(string LoginProvider, string ProviderKey, string UserId)
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_GetAspNetUserLogins";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add in parameters
			db.AddInParameter(dbCommandWrapper, "@LoginProvider", DbType.String, LoginProvider);
			db.AddInParameter(dbCommandWrapper, "@ProviderKey", DbType.String, ProviderKey);
			db.AddInParameter(dbCommandWrapper, "@UserId", DbType.String, UserId);

			// DataSet that will hold the returned results		
			// Note: connection closed by ExecuteDataSet method call 
			return db.ExecuteDataSet(dbCommandWrapper);
		}
	
		/// <summary>
		/// Populates current instance of the object with info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="LoginProvider"></param>
		/// <param name="ProviderKey"></param>
		/// <param name="UserId"></param>
		public virtual void Load(string LoginProvider, string ProviderKey, string UserId)
		{
			// DataSet that will hold the returned results		
			DataSet ds = this.LoadByPrimaryKey(LoginProvider, ProviderKey, UserId);
			
			// Load member variables from datarow
			DataRow row = ds.Tables[0].Rows[0];
			_LoginProvider = (string)row["LoginProvider"];
			_ProviderKey = (string)row["ProviderKey"];
			_UserId = (string)row["UserId"];
		}

		/// <summary>
		/// Adds or updates information in the database depending on the primary key stored in the object instance.
		/// </summary>
		/// <returns>Returns True if saved successfully, False otherwise.</returns>
		public bool Save()
		{
			if (this.IsNew)
				return Insert();
			else
				return Update();
		}

		/// <summary>
		/// Inserts the current instance data into the database.
		/// </summary>
		/// <returns>Returns True if saved successfully, False otherwise.</returns>
		private bool Insert()
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_AddAspNetUserLogins";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add parameters
			db.AddInParameter(dbCommandWrapper, "@LoginProvider", DbType.String, _LoginProvider);
			db.AddInParameter(dbCommandWrapper, "@ProviderKey", DbType.String, _ProviderKey);
			db.AddInParameter(dbCommandWrapper, "@UserId", DbType.String, _UserId);

			db.ExecuteNonQuery(dbCommandWrapper);
			
			return true;
		}

		/// <summary>
		/// Updates the current instance data in the database.
		/// </summary>
		/// <returns>Returns True if saved successfully, False otherwise.</returns>
		public bool Update()
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_UpdateAspNetUserLogins";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add parameters
			db.AddInParameter(dbCommandWrapper, "@LoginProvider", DbType.String, _LoginProvider);
			db.AddInParameter(dbCommandWrapper, "@ProviderKey", DbType.String, _ProviderKey);
			db.AddInParameter(dbCommandWrapper, "@UserId", DbType.String, _UserId);

			try
			{
				db.ExecuteNonQuery(dbCommandWrapper);
				
				return true;
			}
			catch
			{
				return false;
			}
		}

		/// <summary>
		/// Removes info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="LoginProvider"></param>
		/// <param name="ProviderKey"></param>
		/// <param name="UserId"></param>
		public static void Remove(string LoginProvider, string ProviderKey, string UserId)
		{
			// Create the Database object, using the default database service. The
			// default database service is determined through configuration.
			Database db = DatabaseFactory.CreateDatabase();

			string sqlCommand = "daab_DeleteAspNetUserLogins";
			DbCommand dbCommandWrapper = db.GetStoredProcCommand(sqlCommand);

			// Add primary keys to command wrapper.
			db.AddInParameter(dbCommandWrapper, "@LoginProvider", DbType.String, LoginProvider);
			db.AddInParameter(dbCommandWrapper, "@ProviderKey", DbType.String, ProviderKey);
			db.AddInParameter(dbCommandWrapper, "@UserId", DbType.String, UserId);

			db.ExecuteNonQuery(dbCommandWrapper);
		}
		
		/// <summary>
		/// Serializes the current instance data to an Xml string.
		/// </summary>
		/// <returns>A string containing the Xml representation of the object.</returns>
		virtual public string ToXml()
		{
			// DataSet that will hold the returned results		
			DataSet ds = this.LoadByPrimaryKey(_LoginProvider, _ProviderKey, _UserId);
			StringWriter writer = new StringWriter(); 
			ds.WriteXml(writer); 
			return writer.ToString(); 
		}

		/// <summary>
		/// Utility function that returns a DBNull.Value if requested. The comparison is done inline
		/// in the Insert() and Update() functions.
		/// </summary>
		private object SetNullValue(bool isNullValue, object value)
		{
			if (isNullValue)
				return DBNull.Value;
			else
				return value;
		}
	}
}
